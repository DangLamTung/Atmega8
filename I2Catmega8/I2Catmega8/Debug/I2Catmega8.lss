
I2Catmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000120  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001bf  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000732  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c3  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009a6  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000200  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002fc  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002c8  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	sbi(ctrl,EN);
	l = data_o & 0xF0;
	cbi(ctrl,EN);
	l >>= 4;
	return (h|l);
}
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	d9 d0       	rcall	.+434    	; 0x1fc <main>
  4a:	27 c1       	rjmp	.+590    	; 0x29a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_Z9write2Nibh>:
void write2Nib(uint8_t chr){
	uint8_t h, l, temp;
	temp = data_o & 0x0F;
  4e:	e8 e3       	ldi	r30, 0x38	; 56
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	20 81       	ld	r18, Z
  54:	2f 70       	andi	r18, 0x0F	; 15
	
	h = chr & 0xF0;
	l = (chr<<4)& 0xF0;
	
	data_o = (h|temp);
  56:	98 2f       	mov	r25, r24
  58:	90 7f       	andi	r25, 0xF0	; 240
  5a:	92 2b       	or	r25, r18
  5c:	90 83       	st	Z, r25
	sbi(ctrl,EN);
  5e:	90 81       	ld	r25, Z
  60:	94 60       	ori	r25, 0x04	; 4
  62:	90 83       	st	Z, r25
	cbi(ctrl,EN);
  64:	90 81       	ld	r25, Z
  66:	9b 7f       	andi	r25, 0xFB	; 251
  68:	90 83       	st	Z, r25
	
	data_o = (l|temp);
  6a:	82 95       	swap	r24
  6c:	80 7f       	andi	r24, 0xF0	; 240
  6e:	82 2b       	or	r24, r18
  70:	80 83       	st	Z, r24
	sbi(ctrl,EN);
  72:	80 81       	ld	r24, Z
  74:	84 60       	ori	r24, 0x04	; 4
  76:	80 83       	st	Z, r24
	cbi(ctrl,EN);
  78:	80 81       	ld	r24, Z
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	80 83       	st	Z, r24
}
  7e:	08 95       	ret

00000080 <_Z8wait_LCDv>:
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  80:	8a ef       	ldi	r24, 0xFA	; 250
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <_Z8wait_LCDv+0x4>

void wait_LCD(){
	_delay_ms(1);
}
  88:	08 95       	ret

0000008a <_Z8init_LCDv>:

void init_LCD(){
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
	ddr_ctrl = 0xFF;
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
	ddr_data = 0xFF;
  96:	80 83       	st	Z, r24
	
	cbi(ctrl,RS);
  98:	08 e3       	ldi	r16, 0x38	; 56
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	f8 01       	movw	r30, r16
  9e:	80 81       	ld	r24, Z
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	80 83       	st	Z, r24
	cbi(ctrl,RW);
  a4:	80 81       	ld	r24, Z
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	80 83       	st	Z, r24
	cbi(ctrl,EN);
  aa:	80 81       	ld	r24, Z
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	80 83       	st	Z, r24
	
	sbi(ctrl,EN);
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
	sbi(data_o,5); // 101
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
	cbi(ctrl,EN);
  bc:	80 81       	ld	r24, Z
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	80 83       	st	Z, r24
	
	wait_LCD();
  c2:	de df       	rcall	.-68     	; 0x80 <_Z8wait_LCDv>
	write2Nib(0x28);//4bit
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	c3 df       	rcall	.-122    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
  c8:	db df       	rcall	.-74     	; 0x80 <_Z8wait_LCDv>
	//hi?n control
	cbi(ctrl,RS);
  ca:	f8 01       	movw	r30, r16
  cc:	80 81       	ld	r24, Z
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 83       	st	Z, r24
	write2Nib(0x0E);
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	bc df       	rcall	.-136    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
  d6:	d4 df       	rcall	.-88     	; 0x80 <_Z8wait_LCDv>
	//Entry mode
	cbi(ctrl,RS);
  d8:	f8 01       	movw	r30, r16
  da:	80 81       	ld	r24, Z
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	80 83       	st	Z, r24
	write2Nib(0x06);
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	b5 df       	rcall	.-150    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
  e4:	cd df       	rcall	.-102    	; 0x80 <_Z8wait_LCDv>
}
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <_Z8home_LCDv>:

void home_LCD(){
	cbi(ctrl,RS);
  ec:	e8 e3       	ldi	r30, 0x38	; 56
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
	write2Nib(0x02);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	aa df       	rcall	.-172    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
  fa:	c2 df       	rcall	.-124    	; 0x80 <_Z8wait_LCDv>
}
  fc:	08 95       	ret

000000fe <_Z7clr_LCDv>:
	
	write2Nib(ad);
	wait_LCD();
}
void clr_LCD(){
	cbi(ctrl,RS);
  fe:	e8 e3       	ldi	r30, 0x38	; 56
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	80 83       	st	Z, r24
	write2Nib(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	a1 df       	rcall	.-190    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
 10c:	b9 df       	rcall	.-142    	; 0x80 <_Z8wait_LCDv>
}
 10e:	08 95       	ret

00000110 <_Z11putchar_LCDh>:

void putchar_LCD(uint8_t chr){
	sbi(ctrl,RS);//data
 110:	e8 e3       	ldi	r30, 0x38	; 56
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	91 60       	ori	r25, 0x01	; 1
 118:	90 83       	st	Z, r25
	write2Nib(chr);
 11a:	99 df       	rcall	.-206    	; 0x4e <_Z9write2Nibh>
	wait_LCD();
 11c:	b1 df       	rcall	.-158    	; 0x80 <_Z8wait_LCDv>
}
 11e:	08 95       	ret

00000120 <_Z9TWI_Startv>:
#define F_CPU 80000000UL
#define sbi(port,bit) port |= (1<<bit)
#define cbi(port,bit) port &= ~(1<<bit)
#define BITRATE(TWSR)	((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1)))))

void TWI_Start(){ TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);}
 120:	84 ea       	ldi	r24, 0xA4	; 164
 122:	86 bf       	out	0x36, r24	; 54
 124:	08 95       	ret

00000126 <_Z10TWI_Startrv>:
void TWI_Startr(){ TWCR = (1<<TWINT)|(1<<TWEN);}
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	86 bf       	out	0x36, r24	; 54
 12a:	08 95       	ret

0000012c <_Z8TWI_Stopv>:
void TWI_Stop(){ 
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 12c:	84 e9       	ldi	r24, 0x94	; 148
 12e:	86 bf       	out	0x36, r24	; 54
    while(TWCR&(1<<TWSTO));
 130:	e6 e5       	ldi	r30, 0x56	; 86
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	84 fd       	sbrc	r24, 4
 138:	fd cf       	rjmp	.-6      	; 0x134 <_Z8TWI_Stopv+0x8>
	}
 13a:	08 95       	ret

0000013c <_Z7waitI2Cv>:
	
void waitI2C() { while (!(TWCR & (1<<TWINT)));}
 13c:	e6 e5       	ldi	r30, 0x56	; 86
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <_Z7waitI2Cv+0x4>
 146:	08 95       	ret

00000148 <_Z14get_i2c_statusv>:
uint8_t get_i2c_status() {return (TWSR & 0xF8); }
 148:	81 b1       	in	r24, 0x01	; 1
 14a:	88 7f       	andi	r24, 0xF8	; 248
 14c:	08 95       	ret

0000014e <_Z8I2C_Initv>:
void I2C_Init()			/* I2C initialize function */
{
	TWSR = 0x00;
 14e:	11 b8       	out	0x01, r1	; 1
	TWBR = 32;
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	80 b9       	out	0x00, r24	; 0
}
 154:	08 95       	ret

00000156 <_Z7readI2Cc>:

uint8_t readI2C(char address){
 156:	1f 93       	push	r17
 158:	18 2f       	mov	r17, r24
	uint8_t status;
	TWI_Start();
 15a:	e2 df       	rcall	.-60     	; 0x120 <_Z9TWI_Startv>
	waitI2C();
 15c:	ef df       	rcall	.-34     	; 0x13c <_Z7waitI2Cv>
	if (get_i2c_status() != 0x08) return 0;//send connect status
 15e:	f4 df       	rcall	.-24     	; 0x148 <_Z14get_i2c_statusv>
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	11 f0       	breq	.+4      	; 0x168 <_Z7readI2Cc+0x12>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0f c0       	rjmp	.+30     	; 0x186 <_Z7readI2Cc+0x30>
	waitI2C();
 168:	e9 df       	rcall	.-46     	; 0x13c <_Z7waitI2Cv>
	TWDR = address;
 16a:	13 b9       	out	0x03, r17	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	86 bf       	out	0x36, r24	; 54
	waitI2C();
 170:	e5 df       	rcall	.-54     	; 0x13c <_Z7waitI2Cv>
	status = get_i2c_status();
 172:	ea df       	rcall	.-44     	; 0x148 <_Z14get_i2c_statusv>
	if(status == 0x40)
 174:	80 34       	cpi	r24, 0x40	; 64
 176:	11 f4       	brne	.+4      	; 0x17c <_Z7readI2Cc+0x26>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	05 c0       	rjmp	.+10     	; 0x186 <_Z7readI2Cc+0x30>
	  return 1;
   if(status == 0x48)
 17c:	88 34       	cpi	r24, 0x48	; 72
 17e:	11 f0       	breq	.+4      	; 0x184 <_Z7readI2Cc+0x2e>
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	01 c0       	rjmp	.+2      	; 0x186 <_Z7readI2Cc+0x30>
 184:	82 e0       	ldi	r24, 0x02	; 2
	  return 2;
	 return 3;
}
 186:	1f 91       	pop	r17
 188:	08 95       	ret

0000018a <_Z13readI2Crepeatc>:
uint8_t readI2Crepeat(char address){
 18a:	1f 93       	push	r17
 18c:	18 2f       	mov	r17, r24
	uint8_t status;
	TWI_Startr();
 18e:	cb df       	rcall	.-106    	; 0x126 <_Z10TWI_Startrv>
	waitI2C();
 190:	d5 df       	rcall	.-86     	; 0x13c <_Z7waitI2Cv>
	if (get_i2c_status() != 0x08) return 0;//send connect status
 192:	da df       	rcall	.-76     	; 0x148 <_Z14get_i2c_statusv>
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	11 f0       	breq	.+4      	; 0x19c <_Z13readI2Crepeatc+0x12>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <_Z13readI2Crepeatc+0x30>
	waitI2C();
 19c:	cf df       	rcall	.-98     	; 0x13c <_Z7waitI2Cv>
	TWDR = address;
 19e:	13 b9       	out	0x03, r17	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	86 bf       	out	0x36, r24	; 54
	waitI2C();
 1a4:	cb df       	rcall	.-106    	; 0x13c <_Z7waitI2Cv>
	status = get_i2c_status();
 1a6:	d0 df       	rcall	.-96     	; 0x148 <_Z14get_i2c_statusv>
	if(status == 0x40)
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <_Z13readI2Crepeatc+0x26>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <_Z13readI2Crepeatc+0x30>
	return 1;
	if(status == 0x48)
 1b0:	88 34       	cpi	r24, 0x48	; 72
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <_Z13readI2Crepeatc+0x2e>
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <_Z13readI2Crepeatc+0x30>
 1b8:	82 e0       	ldi	r24, 0x02	; 2
	return 2;
	return 3;
}
 1ba:	1f 91       	pop	r17
 1bc:	08 95       	ret

000001be <_Z8writeI2Cc>:
uint8_t writeI2C(char data){
 1be:	1f 93       	push	r17
 1c0:	18 2f       	mov	r17, r24
	uint8_t status;
	TWI_Start();
 1c2:	ae df       	rcall	.-164    	; 0x120 <_Z9TWI_Startv>
	waitI2C();
 1c4:	bb df       	rcall	.-138    	; 0x13c <_Z7waitI2Cv>
	if (get_i2c_status() != 0x08) return 0;//send connect status
 1c6:	c0 df       	rcall	.-128    	; 0x148 <_Z14get_i2c_statusv>
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <_Z8writeI2Cc+0x12>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <_Z8writeI2Cc+0x30>
	waitI2C();
 1d0:	b5 df       	rcall	.-150    	; 0x13c <_Z7waitI2Cv>
	TWDR = data;
 1d2:	13 b9       	out	0x03, r17	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	86 bf       	out	0x36, r24	; 54
	waitI2C();
 1d8:	b1 df       	rcall	.-158    	; 0x13c <_Z7waitI2Cv>
	status = get_i2c_status();
 1da:	b6 df       	rcall	.-148    	; 0x148 <_Z14get_i2c_statusv>
	if(status == 0x40)
 1dc:	80 34       	cpi	r24, 0x40	; 64
 1de:	11 f4       	brne	.+4      	; 0x1e4 <_Z8writeI2Cc+0x26>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_Z8writeI2Cc+0x30>
	return 1;
	if(status == 0x48)
 1e4:	88 34       	cpi	r24, 0x48	; 72
 1e6:	11 f0       	breq	.+4      	; 0x1ec <_Z8writeI2Cc+0x2e>
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <_Z8writeI2Cc+0x30>
 1ec:	82 e0       	ldi	r24, 0x02	; 2
	return 2;
	return 3;
}
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <_Z11readI2CNackv>:
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
	waitI2C();
	return TWDR;
}
char readI2CNack(){
	TWCR = (1<<TWEN)|(1<<TWINT);
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	86 bf       	out	0x36, r24	; 54
	waitI2C();
 1f6:	a2 df       	rcall	.-188    	; 0x13c <_Z7waitI2Cv>
	return TWDR;
 1f8:	83 b1       	in	r24, 0x03	; 3
}
 1fa:	08 95       	ret

000001fc <main>:


int main(void)
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	2a 97       	sbiw	r28, 0x0a	; 10
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
{
    init_LCD();
 218:	38 df       	rcall	.-400    	; 0x8a <_Z8init_LCDv>
	clr_LCD();
 21a:	71 df       	rcall	.-286    	; 0xfe <_Z7clr_LCDv>
	home_LCD();
 21c:	67 df       	rcall	.-306    	; 0xec <_Z8home_LCDv>
	//print_LCD("hello", 5);
	I2C_Init();
 21e:	97 df       	rcall	.-210    	; 0x14e <_Z8I2C_Initv>
    char array[10]="test";
 220:	de 01       	movw	r26, r28
 222:	11 96       	adiw	r26, 0x01	; 1
 224:	e0 e6       	ldi	r30, 0x60	; 96
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x2e>
 232:	fe 01       	movw	r30, r28
 234:	36 96       	adiw	r30, 0x06	; 6
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	df 01       	movw	r26, r30
 23a:	1d 92       	st	X+, r1
 23c:	8a 95       	dec	r24
 23e:	e9 f7       	brne	.-6      	; 0x23a <main+0x3e>
	readI2C(0x20);
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	89 df       	rcall	.-238    	; 0x156 <_Z7readI2Cc>
	writeI2C(0x00);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	bb df       	rcall	.-138    	; 0x1be <_Z8writeI2Cc>
 248:	8e 01       	movw	r16, r28
 24a:	0f 5f       	subi	r16, 0xFF	; 255
 24c:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i =0 ; i<5 ; i++){
 24e:	0f 2e       	mov	r0, r31
 250:	f6 e0       	ldi	r31, 0x06	; 6
 252:	ef 2e       	mov	r14, r31
 254:	ff 24       	eor	r15, r15
 256:	f0 2d       	mov	r31, r0
 258:	ec 0e       	add	r14, r28
 25a:	fd 1e       	adc	r15, r29
		writeI2C(array[i]);
 25c:	f8 01       	movw	r30, r16
 25e:	81 91       	ld	r24, Z+
 260:	8f 01       	movw	r16, r30
 262:	ad df       	rcall	.-166    	; 0x1be <_Z8writeI2Cc>
	//print_LCD("hello", 5);
	I2C_Init();
    char array[10]="test";
	readI2C(0x20);
	writeI2C(0x00);
	for(int i =0 ; i<5 ; i++){
 264:	0e 15       	cp	r16, r14
 266:	1f 05       	cpc	r17, r15
 268:	c9 f7       	brne	.-14     	; 0x25c <main+0x60>
		writeI2C(array[i]);
	}
	TWI_Stop();
 26a:	60 df       	rcall	.-320    	; 0x12c <_Z8TWI_Stopv>
 26c:	84 ec       	ldi	r24, 0xC4	; 196
 26e:	99 e0       	ldi	r25, 0x09	; 9
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x74>
	_delay_ms(10);
	readI2C(0x20);
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	6f df       	rcall	.-290    	; 0x156 <_Z7readI2Cc>
	writeI2C(0x00);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	a1 df       	rcall	.-190    	; 0x1be <_Z8writeI2Cc>
	readI2Crepeat(0x20);
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	85 df       	rcall	.-246    	; 0x18a <_Z13readI2Crepeatc>
 280:	00 e0       	ldi	r16, 0x00	; 0
 282:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i<10; i++){
		char c = readI2CNack();
 284:	b6 df       	rcall	.-148    	; 0x1f2 <_Z11readI2CNackv>
		if(c!='\0'){putchar_LCD(c);}
 286:	81 11       	cpse	r24, r1
 288:	43 df       	rcall	.-378    	; 0x110 <_Z11putchar_LCDh>
	TWI_Stop();
	_delay_ms(10);
	readI2C(0x20);
	writeI2C(0x00);
	readI2Crepeat(0x20);
	for(int i = 0; i<10; i++){
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	0a 30       	cpi	r16, 0x0A	; 10
 290:	11 05       	cpc	r17, r1
 292:	c1 f7       	brne	.-16     	; 0x284 <main+0x88>
		char c = readI2CNack();
		if(c!='\0'){putchar_LCD(c);}
		
	}
	readI2CNack();
 294:	ae df       	rcall	.-164    	; 0x1f2 <_Z11readI2CNackv>
	TWI_Stop();
 296:	4a df       	rcall	.-364    	; 0x12c <_Z8TWI_Stopv>
 298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x9c>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
