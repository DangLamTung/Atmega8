
firstStepOfTheEnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000061  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000165  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000105  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a9  00000000  00000000  0000050f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000036  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e8       	ldi	r30, 0x8E	; 142
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	30 d0       	rcall	.+96     	; 0xaa <main>
  4a:	9f c0       	rjmp	.+318    	; 0x18a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_Z8init_ADCv>:
#include <avr/interrupt.h>
#define  F_CPU 10000000UL
#define loop_until_bit_is_set(sfr,bit) do { } while (bit_is_clear(sfr, bit))
uint16_t ADC_data = 1000;
void init_ADC(){
	ADMUX = (1<<REFS0)|(1<<MUX1)|(1<<MUX0)|(1<<ADLAR);//2.56 VREF, ADC3
  4e:	83 e6       	ldi	r24, 0x63	; 99
  50:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1);//enable adc, enable interrupt adc
  52:	83 e8       	ldi	r24, 0x83	; 131
  54:	86 b9       	out	0x06, r24	; 6
	
}
  56:	08 95       	ret

00000058 <_Z9uart_initv>:
void uart_init(){
	UBRRH = 0;
  58:	e0 e4       	ldi	r30, 0x40	; 64
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	10 82       	st	Z, r1
	UBRRL = 12;
  5e:	8c e0       	ldi	r24, 0x0C	; 12
  60:	89 b9       	out	0x09, r24	; 9
	
	UCSRA = (1<<U2X);
  62:	82 e0       	ldi	r24, 0x02	; 2
  64:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 83       	st	Z, r24
}
  6e:	08 95       	ret

00000070 <_Z13uart_transmitc>:

void uart_transmit(char data){
  70:	98 2f       	mov	r25, r24
	while(!(UCSRA&(1<<UDRE)));
  72:	eb e2       	ldi	r30, 0x2B	; 43
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	85 ff       	sbrs	r24, 5
  7a:	fd cf       	rjmp	.-6      	; 0x76 <_Z13uart_transmitc+0x6>
	UDR = data;
  7c:	9c b9       	out	0x0c, r25	; 12
}
  7e:	08 95       	ret

00000080 <_Z7readADCv>:

uint16_t readADC(){	
	uint16_t high, low;
	ADCSRA |= (1<<ADSC);
  80:	e6 e2       	ldi	r30, 0x26	; 38
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA,ADIF); 
  8a:	80 81       	ld	r24, Z
  8c:	84 ff       	sbrs	r24, 4
  8e:	fd cf       	rjmp	.-6      	; 0x8a <_Z7readADCv+0xa>
	low = ADCL;
  90:	84 b1       	in	r24, 0x04	; 4
	high = ADCH;
  92:	25 b1       	in	r18, 0x05	; 5
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	28 2b       	or	r18, r24
  a2:	39 2b       	or	r19, r25
	high <<=2;
	
	return high|low;
}
  a4:	82 2f       	mov	r24, r18
  a6:	93 2f       	mov	r25, r19
  a8:	08 95       	ret

000000aa <main>:
int main(void)
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x12>
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x14>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
{
	init_ADC();
  c2:	c5 df       	rcall	.-118    	; 0x4e <_Z8init_ADCv>
	uart_init();
  c4:	c9 df       	rcall	.-110    	; 0x58 <_Z9uart_initv>
    char temp[4];
	//sei();
	while(1){
	ADC_data = readADC();
    itoa(ADC_data, temp,10);
  c6:	6e 01       	movw	r12, r28
  c8:	08 94       	sec
  ca:	c1 1c       	adc	r12, r1
  cc:	d1 1c       	adc	r13, r1
	for(int i = 0; i <4;i++){
  ce:	0f 2e       	mov	r0, r31
  d0:	f5 e0       	ldi	r31, 0x05	; 5
  d2:	ef 2e       	mov	r14, r31
  d4:	ff 24       	eor	r15, r15
  d6:	f0 2d       	mov	r31, r0
  d8:	ec 0e       	add	r14, r28
  da:	fd 1e       	adc	r15, r29
	init_ADC();
	uart_init();
    char temp[4];
	//sei();
	while(1){
	ADC_data = readADC();
  dc:	d1 df       	rcall	.-94     	; 0x80 <_Z7readADCv>
  de:	90 93 61 00 	sts	0x0061, r25
  e2:	80 93 60 00 	sts	0x0060, r24
    itoa(ADC_data, temp,10);
  e6:	b6 01       	movw	r22, r12
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	0b d0       	rcall	.+22     	; 0x104 <itoa>
  ee:	86 01       	movw	r16, r12
	for(int i = 0; i <4;i++){
		uart_transmit(temp[i]);
  f0:	f8 01       	movw	r30, r16
  f2:	81 91       	ld	r24, Z+
  f4:	8f 01       	movw	r16, r30
  f6:	bc df       	rcall	.-136    	; 0x70 <_Z13uart_transmitc>
    char temp[4];
	//sei();
	while(1){
	ADC_data = readADC();
    itoa(ADC_data, temp,10);
	for(int i = 0; i <4;i++){
  f8:	0e 15       	cp	r16, r14
  fa:	1f 05       	cpc	r17, r15
  fc:	c9 f7       	brne	.-14     	; 0xf0 <main+0x46>
		uart_transmit(temp[i]);
	}
    uart_transmit(' ');
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	b7 df       	rcall	.-146    	; 0x70 <_Z13uart_transmitc>
 102:	ec cf       	rjmp	.-40     	; 0xdc <main+0x32>

00000104 <itoa>:
 104:	fb 01       	movw	r30, r22
 106:	9f 01       	movw	r18, r30
 108:	e8 94       	clt
 10a:	42 30       	cpi	r20, 0x02	; 2
 10c:	bc f0       	brlt	.+46     	; 0x13c <itoa+0x38>
 10e:	45 32       	cpi	r20, 0x25	; 37
 110:	ac f4       	brge	.+42     	; 0x13c <itoa+0x38>
 112:	4a 30       	cpi	r20, 0x0A	; 10
 114:	29 f4       	brne	.+10     	; 0x120 <itoa+0x1c>
 116:	97 fb       	bst	r25, 7
 118:	1e f4       	brtc	.+6      	; 0x120 <itoa+0x1c>
 11a:	90 95       	com	r25
 11c:	81 95       	neg	r24
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	64 2f       	mov	r22, r20
 122:	77 27       	eor	r23, r23
 124:	1e d0       	rcall	.+60     	; 0x162 <__udivmodhi4>
 126:	80 5d       	subi	r24, 0xD0	; 208
 128:	8a 33       	cpi	r24, 0x3A	; 58
 12a:	0c f0       	brlt	.+2      	; 0x12e <itoa+0x2a>
 12c:	89 5d       	subi	r24, 0xD9	; 217
 12e:	81 93       	st	Z+, r24
 130:	cb 01       	movw	r24, r22
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	a9 f7       	brne	.-22     	; 0x120 <itoa+0x1c>
 136:	16 f4       	brtc	.+4      	; 0x13c <itoa+0x38>
 138:	5d e2       	ldi	r21, 0x2D	; 45
 13a:	51 93       	st	Z+, r21
 13c:	10 82       	st	Z, r1
 13e:	c9 01       	movw	r24, r18
 140:	00 c0       	rjmp	.+0      	; 0x142 <strrev>

00000142 <strrev>:
 142:	dc 01       	movw	r26, r24
 144:	fc 01       	movw	r30, r24
 146:	67 2f       	mov	r22, r23
 148:	71 91       	ld	r23, Z+
 14a:	77 23       	and	r23, r23
 14c:	e1 f7       	brne	.-8      	; 0x146 <strrev+0x4>
 14e:	32 97       	sbiw	r30, 0x02	; 2
 150:	04 c0       	rjmp	.+8      	; 0x15a <strrev+0x18>
 152:	7c 91       	ld	r23, X
 154:	6d 93       	st	X+, r22
 156:	70 83       	st	Z, r23
 158:	62 91       	ld	r22, -Z
 15a:	ae 17       	cp	r26, r30
 15c:	bf 07       	cpc	r27, r31
 15e:	c8 f3       	brcs	.-14     	; 0x152 <strrev+0x10>
 160:	08 95       	ret

00000162 <__udivmodhi4>:
 162:	aa 1b       	sub	r26, r26
 164:	bb 1b       	sub	r27, r27
 166:	51 e1       	ldi	r21, 0x11	; 17
 168:	07 c0       	rjmp	.+14     	; 0x178 <__udivmodhi4_ep>

0000016a <__udivmodhi4_loop>:
 16a:	aa 1f       	adc	r26, r26
 16c:	bb 1f       	adc	r27, r27
 16e:	a6 17       	cp	r26, r22
 170:	b7 07       	cpc	r27, r23
 172:	10 f0       	brcs	.+4      	; 0x178 <__udivmodhi4_ep>
 174:	a6 1b       	sub	r26, r22
 176:	b7 0b       	sbc	r27, r23

00000178 <__udivmodhi4_ep>:
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	5a 95       	dec	r21
 17e:	a9 f7       	brne	.-22     	; 0x16a <__udivmodhi4_loop>
 180:	80 95       	com	r24
 182:	90 95       	com	r25
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
