
textLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6e  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075a  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000421  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004de  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z9write2Nibh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	25 b1       	in	r18, 0x05	; 5
  98:	2f 70       	andi	r18, 0x0F	; 15
  9a:	98 2f       	mov	r25, r24
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	2a 9a       	sbi	0x05, 2	; 5
  a4:	2a 98       	cbi	0x05, 2	; 5
  a6:	30 e1       	ldi	r19, 0x10	; 16
  a8:	83 9f       	mul	r24, r19
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	82 2b       	or	r24, r18
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	2a 9a       	sbi	0x05, 2	; 5
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	08 95       	ret

000000b8 <_Z8init_LCDv>:
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
  bc:	84 b9       	out	0x04, r24	; 4
  be:	28 98       	cbi	0x05, 0	; 5
  c0:	29 98       	cbi	0x05, 1	; 5
  c2:	2a 98       	cbi	0x05, 2	; 5
  c4:	2a 9a       	sbi	0x05, 2	; 5
  c6:	2d 9a       	sbi	0x05, 5	; 5
  c8:	2a 98       	cbi	0x05, 2	; 5
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <_Z8init_LCDv+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z8init_LCDv+0x1c>
  d4:	00 00       	nop
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z8init_LCDv+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z8init_LCDv+0x2e>
  e6:	00 00       	nop
  e8:	28 98       	cbi	0x05, 0	; 5
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_Z8init_LCDv+0x3c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_Z8init_LCDv+0x42>
  fa:	00 00       	nop
  fc:	28 98       	cbi	0x05, 0	; 5
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z8init_LCDv+0x50>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z8init_LCDv+0x56>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <_Z8move_LCDhh>:
  wait_LCD();
}
void move_LCD(uint8_t y, uint8_t x){
  uint8_t ad;
  ad = 64*(y-1)+(x-1)+0x80;
  cbi(ctrl,RS);
 112:	28 98       	cbi	0x05, 0	; 5
  
  write2Nib(ad);
 114:	90 e4       	ldi	r25, 0x40	; 64
 116:	89 9f       	mul	r24, r25
 118:	60 0d       	add	r22, r0
 11a:	11 24       	eor	r1, r1
 11c:	86 2f       	mov	r24, r22
 11e:	81 5c       	subi	r24, 0xC1	; 193
 120:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <_Z8move_LCDhh+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_Z8move_LCDhh+0x1c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <_Z7clr_LCDv>:
  wait_LCD();
}
void clr_LCD(){
  cbi(ctrl,RS);
 132:	28 98       	cbi	0x05, 0	; 5
  write2Nib(0x01);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <_Z7clr_LCDv+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_Z7clr_LCDv+0x12>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <_Z11putchar_LCDh>:
  wait_LCD();
}

void putchar_LCD(uint8_t chr){
  sbi(ctrl,RS);//data 
 148:	28 9a       	sbi	0x05, 0	; 5
  write2Nib(chr);
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9write2Nibh>
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_Z11putchar_LCDh+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_Z11putchar_LCDh+0x10>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <_Z9print_LCDPch>:
  wait_LCD();
}
void print_LCD(char*str,unsigned char len){
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
  unsigned char i;
  for(i=0;i<len;i++){
 164:	66 23       	and	r22, r22
 166:	a1 f0       	breq	.+40     	; 0x190 <_Z9print_LCDPch+0x34>
 168:	ec 01       	movw	r28, r24
 16a:	61 50       	subi	r22, 0x01	; 1
 16c:	06 2f       	mov	r16, r22
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	08 0f       	add	r16, r24
 176:	19 1f       	adc	r17, r25
    if(str[i]>0){putchar_LCD(str[i]);
 178:	89 91       	ld	r24, Y+
 17a:	88 23       	and	r24, r24
 17c:	19 f0       	breq	.+6      	; 0x184 <_Z9print_LCDPch+0x28>
 17e:	0e 94 a4 00 	call	0x148	; 0x148 <_Z11putchar_LCDh>
 182:	03 c0       	rjmp	.+6      	; 0x18a <_Z9print_LCDPch+0x2e>
	}
    else{ putchar_LCD(' ');}
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	0e 94 a4 00 	call	0x148	; 0x148 <_Z11putchar_LCDh>
  write2Nib(chr);
  wait_LCD();
}
void print_LCD(char*str,unsigned char len){
  unsigned char i;
  for(i=0;i<len;i++){
 18a:	c0 17       	cp	r28, r16
 18c:	d1 07       	cpc	r29, r17
 18e:	a1 f7       	brne	.-24     	; 0x178 <_Z9print_LCDPch+0x1c>
    if(str[i]>0){putchar_LCD(str[i]);
	}
    else{ putchar_LCD(' ');}
  }
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <main>:
int main(void)
{
     init_LCD(); //
 19a:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8init_LCDv>
         clr_LCD(); //
 19e:	0e 94 99 00 	call	0x132	; 0x132 <_Z7clr_LCDv>
         putchar_LCD(' '); //
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	0e 94 a4 00 	call	0x148	; 0x148 <_Z11putchar_LCDh>
         putchar_LCD(' '); //
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <_Z11putchar_LCDh>
         putchar_LCD('D'); //Hi?n th?
 1ae:	84 e4       	ldi	r24, 0x44	; 68
 1b0:	0e 94 a4 00 	call	0x148	; 0x148 <_Z11putchar_LCDh>
         print_LCD("of the",10);
 1b4:	6a e0       	ldi	r22, 0x0A	; 10
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z9print_LCDPch>
         move_LCD(2,1);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 89 00 	call	0x112	; 0x112 <_Z8move_LCDhh>
         print_LCD("fuck u all",16);
 1c6:	60 e1       	ldi	r22, 0x10	; 16
 1c8:	87 e0       	ldi	r24, 0x07	; 7
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z9print_LCDPch>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <main+0x36>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
