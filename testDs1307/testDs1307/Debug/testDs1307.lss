
testDs1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000e0c  00000ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080009e  0080009e  00000ede  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000196  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f0  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d0  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008aa  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d9  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	DATA_O =(LNib|temp_data);		
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable
}

void Write8Bit(uint8_t chr){
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	b5 c3       	rjmp	.+1898   	; 0x77e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e0       	ldi	r30, 0x0C	; 12
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 39       	cpi	r26, 0x9E	; 158
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e9       	ldi	r26, 0x9E	; 158
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 3a       	cpi	r26, 0xAB	; 171
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	15 d3       	rcall	.+1578   	; 0x684 <main>
  5a:	d6 c6       	rjmp	.+3500   	; 0xe08 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8Read2Nibv>:
#define DDR_DATA	DDRD
*/

char Read2Nib(void){
	char HNib, LNib;
	DATA_O |=0xF0;
  5e:	e2 e3       	ldi	r30, 0x32	; 50
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	80 6f       	ori	r24, 0xF0	; 240
  66:	80 83       	st	Z, r24
	
	sbi(CTRL,EN); //enable	
  68:	80 81       	ld	r24, Z
  6a:	84 60       	ori	r24, 0x04	; 4
  6c:	80 83       	st	Z, r24
	DDR_DATA &=0x0F;	
  6e:	a1 e3       	ldi	r26, 0x31	; 49
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	8c 91       	ld	r24, X
  74:	8f 70       	andi	r24, 0x0F	; 15
  76:	8c 93       	st	X, r24
	HNib=DATA_I & 0xF0;
  78:	a0 e3       	ldi	r26, 0x30	; 48
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	2c 91       	ld	r18, X
	cbi(CTRL,EN); //disable
  7e:	80 81       	ld	r24, Z
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	80 83       	st	Z, r24
	
	sbi(CTRL,EN); //enable
  84:	80 81       	ld	r24, Z
  86:	84 60       	ori	r24, 0x04	; 4
  88:	80 83       	st	Z, r24
	LNib = DATA_I & 0xF0;
  8a:	8c 91       	ld	r24, X
	cbi(CTRL,EN); //disable
  8c:	90 81       	ld	r25, Z
  8e:	9b 7f       	andi	r25, 0xFB	; 251
  90:	90 83       	st	Z, r25
	LNib>>=4;
  92:	82 95       	swap	r24
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	20 7f       	andi	r18, 0xF0	; 240
	return (HNib|LNib);
}
  98:	82 2b       	or	r24, r18
  9a:	08 95       	ret

0000009c <_Z9Write2Nibh>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  9c:	e2 e3       	ldi	r30, 0x32	; 50
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	20 81       	ld	r18, Z
  a2:	2f 70       	andi	r18, 0x0F	; 15

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  a4:	98 2f       	mov	r25, r24
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	92 2b       	or	r25, r18
  aa:	90 83       	st	Z, r25
	sbi(CTRL,EN); //enable
  ac:	90 81       	ld	r25, Z
  ae:	94 60       	ori	r25, 0x04	; 4
  b0:	90 83       	st	Z, r25
	cbi(CTRL,EN); //disable	
  b2:	90 81       	ld	r25, Z
  b4:	9b 7f       	andi	r25, 0xFB	; 251
  b6:	90 83       	st	Z, r25
	
	DATA_O =(LNib|temp_data);		
  b8:	82 95       	swap	r24
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	82 2b       	or	r24, r18
  be:	80 83       	st	Z, r24
	sbi(CTRL,EN); //enable
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24
	cbi(CTRL,EN); //disable
  c6:	80 81       	ld	r24, Z
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	80 83       	st	Z, r24
}
  cc:	08 95       	ret

000000ce <_Z8wait_LCDv>:
	DATA_O=chr;   //out 8 bits to DATA Line
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable
}

void wait_LCD(void){	
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	0f 92       	push	r0
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  e0:	02 e3       	ldi	r16, 0x32	; 50
  e2:	10 e0       	ldi	r17, 0x00	; 0
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
  e4:	7e 01       	movw	r14, r28
  e6:	08 94       	sec
  e8:	e1 1c       	adc	r14, r1
  ea:	f1 1c       	adc	r15, r1
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  ec:	f8 01       	movw	r30, r16
  ee:	80 81       	ld	r24, Z
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	80 83       	st	Z, r24
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
			temp_val=Read2Nib();
  fa:	b1 df       	rcall	.-158    	; 0x5e <_Z8Read2Nibv>
  fc:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
  fe:	f7 01       	movw	r30, r14
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	9c f3       	brlt	.-26     	; 0xec <_Z8wait_LCDv+0x1e>
		}
		cbi(CTRL,RW); //ready for next step	
 106:	e2 e3       	ldi	r30, 0x32	; 50
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
		DDR_DATA=0xFF;//Ready to Out		
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	81 bb       	out	0x11, r24	; 17
	#endif
	
	//_delay_ms(1);
	
}
 114:	0f 90       	pop	r0
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	08 95       	ret

00000124 <_Z8init_LCDv>:


void init_LCD(void){
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
	DDR_CTRL=0xFF;
 128:	e1 e3       	ldi	r30, 0x31	; 49
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 83       	st	Z, r24
	DDR_DATA=0xFF;
 130:	80 83       	st	Z, r24
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 132:	02 e3       	ldi	r16, 0x32	; 50
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	f8 01       	movw	r30, r16
 138:	80 81       	ld	r24, Z
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	80 83       	st	Z, r24
	cbi(CTRL, RW); // AVR->LCD
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
	cbi(CTRL, EN);
 144:	80 81       	ld	r24, Z
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	80 83       	st	Z, r24
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 14a:	80 81       	ld	r24, Z
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	80 83       	st	Z, r24
		sbi(DATA_O, 5); 
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
		cbi(CTRL,EN); //disable
 156:	80 81       	ld	r24, Z
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	80 83       	st	Z, r24
		wait_LCD();		
 15c:	b8 df       	rcall	.-144    	; 0xce <_Z8wait_LCDv>
		Write2Nib(0x28);//
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	9d df       	rcall	.-198    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();	
 162:	b5 df       	rcall	.-150    	; 0xce <_Z8wait_LCDv>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 164:	f8 01       	movw	r30, r16
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24
	#ifdef LCD8BIT	
		Write8Bit(0x0C);
		wait_LCD();
	#else
		Write2Nib(0x0C); //not Cursor display, 0x0E: with cursor
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	96 df       	rcall	.-212    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();			
 170:	ae df       	rcall	.-164    	; 0xce <_Z8wait_LCDv>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 172:	f8 01       	movw	r30, r16
 174:	80 81       	ld	r24, Z
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	80 83       	st	Z, r24
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	8f df       	rcall	.-226    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();
 17e:	a7 df       	rcall	.-178    	; 0xce <_Z8wait_LCDv>
	#endif
}
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <_Z8move_LCDhh>:
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 186:	e2 e3       	ldi	r30, 0x32	; 50
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	9e 7f       	andi	r25, 0xFE	; 254
 18e:	90 83       	st	Z, r25
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 190:	61 58       	subi	r22, 0x81	; 129
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	00 24       	eor	r0, r0
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	07 94       	ror	r0
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	07 94       	ror	r0
 1a4:	98 2f       	mov	r25, r24
 1a6:	80 2d       	mov	r24, r0
 1a8:	86 0f       	add	r24, r22
 1aa:	78 df       	rcall	.-272    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();
 1ac:	90 df       	rcall	.-224    	; 0xce <_Z8wait_LCDv>
	#endif	
}
 1ae:	08 95       	ret

000001b0 <_Z7clr_LCDv>:

void clr_LCD(void){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 1b0:	e2 e3       	ldi	r30, 0x32	; 50
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 83       	st	Z, r24
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	6f df       	rcall	.-290    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();	
 1be:	87 df       	rcall	.-242    	; 0xce <_Z8wait_LCDv>
		
	#endif	
}
 1c0:	08 95       	ret

000001c2 <_Z11putChar_LCDh>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 1c2:	e2 e3       	ldi	r30, 0x32	; 50
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	90 81       	ld	r25, Z
 1c8:	91 60       	ori	r25, 0x01	; 1
 1ca:	90 83       	st	Z, r25
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 1cc:	67 df       	rcall	.-306    	; 0x9c <_Z9Write2Nibh>
		wait_LCD();	
 1ce:	7f df       	rcall	.-258    	; 0xce <_Z8wait_LCDv>
	#endif		
}
 1d0:	08 95       	ret

000001d2 <_Z9print_LCDPc>:

void print_LCD(char* str){
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 1da:	88 81       	ld	r24, Y
 1dc:	88 23       	and	r24, r24
 1de:	49 f0       	breq	.+18     	; 0x1f2 <_Z9print_LCDPc+0x20>
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	ef df       	rcall	.-34     	; 0x1c2 <_Z11putChar_LCDh>
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	fe 01       	movw	r30, r28
 1e8:	e1 0f       	add	r30, r17
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <_Z9print_LCDPc+0x10>
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <_Z8TWI_Initv>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
 1fa:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
 200:	84 e8       	ldi	r24, 0x84	; 132
 202:	86 bf       	out	0x36, r24	; 54
}
 204:	08 95       	ret

00000206 <_Z15TWI_DS1307_wadrh>:


///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
 206:	98 2f       	mov	r25, r24
		
	TWCR=TWI_START;						 //goi START condition
 208:	84 ea       	ldi	r24, 0xA4	; 164
 20a:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
 20c:	e6 e5       	ldi	r30, 0x56	; 86
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	ec f7       	brge	.-6      	; 0x210 <_Z15TWI_DS1307_wadrh+0xa>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
 216:	81 b1       	in	r24, 0x01	; 1
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	88 30       	cpi	r24, 0x08	; 8
 21c:	11 f0       	breq	.+4      	; 0x222 <_Z15TWI_DS1307_wadrh+0x1c>
 21e:	81 b1       	in	r24, 0x01	; 1
 220:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
 222:	80 ed       	ldi	r24, 0xD0	; 208
 224:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	86 bf       	out	0x36, r24	; 54
	
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
 22a:	e6 e5       	ldi	r30, 0x56	; 86
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	ec f7       	brge	.-6      	; 0x22e <_Z15TWI_DS1307_wadrh+0x28>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
 234:	81 b1       	in	r24, 0x01	; 1
 236:	88 7f       	andi	r24, 0xF8	; 248
 238:	88 31       	cpi	r24, 0x18	; 24
 23a:	11 f0       	breq	.+4      	; 0x240 <_Z15TWI_DS1307_wadrh+0x3a>
 23c:	81 b1       	in	r24, 0x01	; 1
 23e:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
 240:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
 246:	e6 e5       	ldi	r30, 0x56	; 86
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 23       	and	r24, r24
 24e:	ec f7       	brge	.-6      	; 0x24a <_Z15TWI_DS1307_wadrh+0x44>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
 250:	81 b1       	in	r24, 0x01	; 1
 252:	88 7f       	andi	r24, 0xF8	; 248
 254:	88 32       	cpi	r24, 0x28	; 40
 256:	11 f0       	breq	.+4      	; 0x25c <_Z15TWI_DS1307_wadrh+0x56>
 258:	81 b1       	in	r24, 0x01	; 1
 25a:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
 25c:	84 e9       	ldi	r24, 0x94	; 148
 25e:	86 bf       	out	0x36, r24	; 54
 260:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 262:	08 95       	ret

00000264 <_Z17TWI_DS1307_wblockhPhh>:

//ghi 1 mang dat vao DS
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	98 2f       	mov	r25, r24
		
	TWCR=TWI_START; 					 //goi START condition
 26e:	84 ea       	ldi	r24, 0xA4	; 164
 270:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
 272:	e6 e5       	ldi	r30, 0x56	; 86
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	ec f7       	brge	.-6      	; 0x276 <_Z17TWI_DS1307_wblockhPhh+0x12>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
 27c:	81 b1       	in	r24, 0x01	; 1
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	88 30       	cpi	r24, 0x08	; 8
 282:	11 f0       	breq	.+4      	; 0x288 <_Z17TWI_DS1307_wblockhPhh+0x24>
 284:	81 b1       	in	r24, 0x01	; 1
 286:	40 c0       	rjmp	.+128    	; 0x308 <_Z17TWI_DS1307_wblockhPhh+0xa4>
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
 288:	80 ed       	ldi	r24, 0xD0	; 208
 28a:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
 28c:	84 e8       	ldi	r24, 0x84	; 132
 28e:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
 290:	e6 e5       	ldi	r30, 0x56	; 86
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	ec f7       	brge	.-6      	; 0x294 <_Z17TWI_DS1307_wblockhPhh+0x30>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
 29a:	81 b1       	in	r24, 0x01	; 1
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	88 31       	cpi	r24, 0x18	; 24
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <_Z17TWI_DS1307_wblockhPhh+0x42>
 2a2:	81 b1       	in	r24, 0x01	; 1
 2a4:	31 c0       	rjmp	.+98     	; 0x308 <_Z17TWI_DS1307_wblockhPhh+0xa4>
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
 2a6:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
 2ac:	e6 e5       	ldi	r30, 0x56	; 86
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	88 23       	and	r24, r24
 2b4:	ec f7       	brge	.-6      	; 0x2b0 <_Z17TWI_DS1307_wblockhPhh+0x4c>
	if((TWSR&0xF8) !=0x28) return TWSR; 
 2b6:	81 b1       	in	r24, 0x01	; 1
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	88 32       	cpi	r24, 0x28	; 40
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <_Z17TWI_DS1307_wblockhPhh+0x60>

	for (uint8_t i=0; i <len; i++){
 2be:	44 23       	and	r20, r20
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <_Z17TWI_DS1307_wblockhPhh+0x64>
 2c2:	1f c0       	rjmp	.+62     	; 0x302 <_Z17TWI_DS1307_wblockhPhh+0x9e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 
 2c4:	81 b1       	in	r24, 0x01	; 1
 2c6:	20 c0       	rjmp	.+64     	; 0x308 <_Z17TWI_DS1307_wblockhPhh+0xa4>
 2c8:	26 2f       	mov	r18, r22
 2ca:	37 2f       	mov	r19, r23
 2cc:	f9 01       	movw	r30, r18

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
 2ce:	23 e2       	ldi	r18, 0x23	; 35
 2d0:	30 e0       	ldi	r19, 0x00	; 0
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
 2d2:	a6 e5       	ldi	r26, 0x56	; 86
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	94 e8       	ldi	r25, 0x84	; 132
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
 2d8:	01 e2       	ldi	r16, 0x21	; 33
 2da:	10 e0       	ldi	r17, 0x00	; 0
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
 2dc:	80 81       	ld	r24, Z
 2de:	e9 01       	movw	r28, r18
 2e0:	88 83       	st	Y, r24
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
 2e2:	9c 93       	st	X, r25
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
 2e4:	8c 91       	ld	r24, X
 2e6:	88 23       	and	r24, r24
 2e8:	ec f7       	brge	.-6      	; 0x2e4 <_Z17TWI_DS1307_wblockhPhh+0x80>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
 2ea:	e8 01       	movw	r28, r16
 2ec:	88 81       	ld	r24, Y
 2ee:	88 7f       	andi	r24, 0xF8	; 248
 2f0:	88 32       	cpi	r24, 0x28	; 40
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <_Z17TWI_DS1307_wblockhPhh+0x94>
 2f4:	81 b1       	in	r24, 0x01	; 1
 2f6:	08 c0       	rjmp	.+16     	; 0x308 <_Z17TWI_DS1307_wblockhPhh+0xa4>
 2f8:	31 96       	adiw	r30, 0x01	; 1
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
 2fa:	8e 2f       	mov	r24, r30
 2fc:	86 1b       	sub	r24, r22
 2fe:	84 17       	cp	r24, r20
 300:	68 f3       	brcs	.-38     	; 0x2dc <_Z17TWI_DS1307_wblockhPhh+0x78>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
 302:	84 e9       	ldi	r24, 0x94	; 148
 304:	86 bf       	out	0x36, r24	; 54
 306:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <_Z17TWI_DS1307_rblockPhh>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	8c 01       	movw	r16, r24
 31e:	f6 2e       	mov	r15, r22
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
 320:	84 ea       	ldi	r24, 0xA4	; 164
 322:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
 324:	e6 e5       	ldi	r30, 0x56	; 86
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	a1 e2       	ldi	r26, 0x21	; 33
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	ec f7       	brge	.-6      	; 0x32c <_Z17TWI_DS1307_rblockPhh+0x1a>
 332:	8c 91       	ld	r24, X
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	88 30       	cpi	r24, 0x08	; 8
 338:	c9 f7       	brne	.-14     	; 0x32c <_Z17TWI_DS1307_rblockPhh+0x1a>
 33a:	2e c0       	rjmp	.+92     	; 0x398 <_Z17TWI_DS1307_rblockPhh+0x86>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	ec f7       	brge	.-6      	; 0x33c <_Z17TWI_DS1307_rblockPhh+0x2a>
 342:	8c 91       	ld	r24, X
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	80 34       	cpi	r24, 0x40	; 64
 348:	c9 f7       	brne	.-14     	; 0x33c <_Z17TWI_DS1307_rblockPhh+0x2a>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
 34a:	8f 2d       	mov	r24, r15
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	41 50       	subi	r20, 0x01	; 1
 352:	50 40       	sbci	r21, 0x00	; 0
 354:	14 16       	cp	r1, r20
 356:	15 06       	cpc	r1, r21
 358:	8c f4       	brge	.+34     	; 0x37c <_Z17TWI_DS1307_rblockPhh+0x6a>
 35a:	20 e0       	ldi	r18, 0x00	; 0
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
 35c:	a6 e5       	ldi	r26, 0x56	; 86
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	34 ec       	ldi	r19, 0xC4	; 196
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
 362:	c1 e2       	ldi	r28, 0x21	; 33
 364:	d0 e0       	ldi	r29, 0x00	; 0
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
 366:	63 e2       	ldi	r22, 0x23	; 35
 368:	70 e0       	ldi	r23, 0x00	; 0
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
 36a:	3c 93       	st	X, r19
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
 36c:	8c 91       	ld	r24, X
 36e:	88 23       	and	r24, r24
 370:	ec f7       	brge	.-6      	; 0x36c <_Z17TWI_DS1307_rblockPhh+0x5a>
 372:	88 81       	ld	r24, Y
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	80 35       	cpi	r24, 0x50	; 80
 378:	c9 f7       	brne	.-14     	; 0x36c <_Z17TWI_DS1307_rblockPhh+0x5a>
 37a:	17 c0       	rjmp	.+46     	; 0x3aa <_Z17TWI_DS1307_rblockPhh+0x98>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
 37c:	84 e8       	ldi	r24, 0x84	; 132
 37e:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
 380:	e6 e5       	ldi	r30, 0x56	; 86
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	a1 e2       	ldi	r26, 0x21	; 33
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	88 23       	and	r24, r24
 38c:	ec f7       	brge	.-6      	; 0x388 <_Z17TWI_DS1307_rblockPhh+0x76>
 38e:	8c 91       	ld	r24, X
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	88 35       	cpi	r24, 0x58	; 88
 394:	c9 f7       	brne	.-14     	; 0x388 <_Z17TWI_DS1307_rblockPhh+0x76>
 396:	16 c0       	rjmp	.+44     	; 0x3c4 <_Z17TWI_DS1307_rblockPhh+0xb2>
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
 398:	81 ed       	ldi	r24, 0xD1	; 209
 39a:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
 39c:	84 e8       	ldi	r24, 0x84	; 132
 39e:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
 3a0:	e6 e5       	ldi	r30, 0x56	; 86
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	a1 e2       	ldi	r26, 0x21	; 33
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	c9 cf       	rjmp	.-110    	; 0x33c <_Z17TWI_DS1307_rblockPhh+0x2a>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
 3aa:	fb 01       	movw	r30, r22
 3ac:	80 81       	ld	r24, Z
 3ae:	f8 01       	movw	r30, r16
 3b0:	e2 0f       	add	r30, r18
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 83       	st	Z, r24
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	82 2f       	mov	r24, r18
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	84 17       	cp	r24, r20
 3be:	95 07       	cpc	r25, r21
 3c0:	a4 f2       	brlt	.-88     	; 0x36a <_Z17TWI_DS1307_rblockPhh+0x58>
 3c2:	dc cf       	rjmp	.-72     	; 0x37c <_Z17TWI_DS1307_rblockPhh+0x6a>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
	Data[len-1]=TWDR;
 3c4:	83 b1       	in	r24, 0x03	; 3
 3c6:	f8 01       	movw	r30, r16
 3c8:	ef 0d       	add	r30, r15
 3ca:	f1 1d       	adc	r31, r1
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	80 83       	st	Z, r24
	
	TWCR=TWI_STOP;											 //STOP condition
 3d0:	84 e9       	ldi	r24, 0x94	; 148
 3d2:	86 bf       	out	0x36, r24	; 54
	return 0;	
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	08 95       	ret

000003e2 <_Z7BCD2Dech>:
		
uint8_t tData[7], Time_count=0; //dinh nghia cac bien tam
char dis[5];		//bien dis dung de luu tru string hien thi len LCD

// doi BCD sang thap phan va nguoc lai------------
uint8_t BCD2Dec(uint8_t BCD){
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	35 95       	asr	r19
 3e8:	27 95       	ror	r18
 3ea:	35 95       	asr	r19
 3ec:	27 95       	ror	r18
 3ee:	35 95       	asr	r19
 3f0:	27 95       	ror	r18
 3f2:	35 95       	asr	r19
 3f4:	27 95       	ror	r18
 3f6:	a9 01       	movw	r20, r18
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	42 0f       	add	r20, r18
 40a:	53 1f       	adc	r21, r19
 40c:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t L, H;
	L=BCD & 0x0F;
	H=(BCD>>4)*10;
	return (H+L);
}
 40e:	84 0f       	add	r24, r20
 410:	08 95       	ret

00000412 <_Z7Dec2BCDh>:
uint8_t Dec2BCD(uint8_t Dec){
 412:	28 2f       	mov	r18, r24
 414:	6a e0       	ldi	r22, 0x0A	; 10
 416:	26 d2       	rcall	.+1100   	; 0x864 <__udivmodqi4>
 418:	38 2f       	mov	r19, r24
 41a:	32 95       	swap	r19
 41c:	30 7f       	andi	r19, 0xF0	; 240
 41e:	82 2f       	mov	r24, r18
 420:	21 d2       	rcall	.+1090   	; 0x864 <__udivmodqi4>
	uint8_t L, H;
	L=Dec % 10;
	H=(Dec/10)<<4;
	return (H+L);
}
 422:	83 2f       	mov	r24, r19
 424:	89 0f       	add	r24, r25
 426:	08 95       	ret

00000428 <_Z7Displayv>:
//------------------------------------------------

void Display(void){ //chuong trinh con  hien thi thoi gian doc tu DS1307
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
	Second 	= BCD2Dec(tData[0] & 0x7F);
 430:	0e e9       	ldi	r16, 0x9E	; 158
 432:	10 e0       	ldi	r17, 0x00	; 0
 434:	f8 01       	movw	r30, r16
 436:	81 91       	ld	r24, Z+
 438:	8f 01       	movw	r16, r30
 43a:	8f 77       	andi	r24, 0x7F	; 127
 43c:	d2 df       	rcall	.-92     	; 0x3e2 <_Z7BCD2Dech>
 43e:	80 93 94 00 	sts	0x0094, r24
	Minute 	= BCD2Dec(tData[1]);
 442:	f8 01       	movw	r30, r16
 444:	80 81       	ld	r24, Z
 446:	cd df       	rcall	.-102    	; 0x3e2 <_Z7BCD2Dech>
 448:	80 93 95 00 	sts	0x0095, r24
	
	if (Mode !=0) 	Hour = BCD2Dec(tData[2] & 0x1F); //mode 12h
 44c:	80 91 9b 00 	lds	r24, 0x009B
 450:	88 23       	and	r24, r24
 452:	39 f0       	breq	.+14     	; 0x462 <__stack+0x3>
 454:	80 91 a0 00 	lds	r24, 0x00A0
 458:	8f 71       	andi	r24, 0x1F	; 31
 45a:	c3 df       	rcall	.-122    	; 0x3e2 <_Z7BCD2Dech>
 45c:	80 93 96 00 	sts	0x0096, r24
 460:	06 c0       	rjmp	.+12     	; 0x46e <__stack+0xf>
	else 		  	Hour = BCD2Dec(tData[2] & 0x3F); //mode 24h	
 462:	80 91 a0 00 	lds	r24, 0x00A0
 466:	8f 73       	andi	r24, 0x3F	; 63
 468:	bc df       	rcall	.-136    	; 0x3e2 <_Z7BCD2Dech>
 46a:	80 93 96 00 	sts	0x0096, r24
	
	Date   	= BCD2Dec(tData[4]);
 46e:	0f 2e       	mov	r0, r31
 470:	f2 ea       	ldi	r31, 0xA2	; 162
 472:	ef 2e       	mov	r14, r31
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	ff 2e       	mov	r15, r31
 478:	f0 2d       	mov	r31, r0
 47a:	f7 01       	movw	r30, r14
 47c:	81 91       	ld	r24, Z+
 47e:	8f 01       	movw	r16, r30
 480:	b0 df       	rcall	.-160    	; 0x3e2 <_Z7BCD2Dech>
 482:	80 93 98 00 	sts	0x0098, r24
	Month	= BCD2Dec(tData[5]);
 486:	f8 01       	movw	r30, r16
 488:	80 81       	ld	r24, Z
 48a:	ab df       	rcall	.-170    	; 0x3e2 <_Z7BCD2Dech>
 48c:	80 93 99 00 	sts	0x0099, r24
	Year	= BCD2Dec(tData[6]);
 490:	f7 01       	movw	r30, r14
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	a6 df       	rcall	.-180    	; 0x3e2 <_Z7BCD2Dech>
 496:	80 93 9a 00 	sts	0x009A, r24
	
	clr_LCD();		//xoa LCD
 49a:	8a de       	rcall	.-748    	; 0x1b0 <_Z7clr_LCDv>
	//in gio:phut:giay
	print_LCD("Time: ");
 49c:	80 e6       	ldi	r24, 0x60	; 96
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	98 de       	rcall	.-720    	; 0x1d2 <_Z9print_LCDPc>
	sprintf(dis, "%i",Hour);
 4a2:	80 91 96 00 	lds	r24, 0x0096
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <__stack+0x49>
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <__stack+0x4b>
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <__stack+0x4d>
 4ac:	ed b7       	in	r30, 0x3d	; 61
 4ae:	fe b7       	in	r31, 0x3e	; 62
 4b0:	31 96       	adiw	r30, 0x01	; 1
 4b2:	06 ea       	ldi	r16, 0xA6	; 166
 4b4:	10 e0       	ldi	r17, 0x00	; 0
 4b6:	11 83       	std	Z+1, r17	; 0x01
 4b8:	00 83       	st	Z, r16
 4ba:	0f 2e       	mov	r0, r31
 4bc:	f7 e6       	ldi	r31, 0x67	; 103
 4be:	ef 2e       	mov	r14, r31
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ff 2e       	mov	r15, r31
 4c4:	f0 2d       	mov	r31, r0
 4c6:	f3 82       	std	Z+3, r15	; 0x03
 4c8:	e2 82       	std	Z+2, r14	; 0x02
 4ca:	84 83       	std	Z+4, r24	; 0x04
 4cc:	15 82       	std	Z+5, r1	; 0x05
 4ce:	d6 d1       	rcall	.+940    	; 0x87c <sprintf>
	move_LCD(1,7);  print_LCD(dis); move_LCD(1,9); putChar_LCD('-');
 4d0:	8d b7       	in	r24, 0x3d	; 61
 4d2:	9e b7       	in	r25, 0x3e	; 62
 4d4:	06 96       	adiw	r24, 0x06	; 6
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	9e bf       	out	0x3e, r25	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	8d bf       	out	0x3d, r24	; 61
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	67 e0       	ldi	r22, 0x07	; 7
 4e4:	50 de       	rcall	.-864    	; 0x186 <_Z8move_LCDhh>
 4e6:	c8 01       	movw	r24, r16
 4e8:	74 de       	rcall	.-792    	; 0x1d2 <_Z9print_LCDPc>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	69 e0       	ldi	r22, 0x09	; 9
 4ee:	4b de       	rcall	.-874    	; 0x186 <_Z8move_LCDhh>
 4f0:	8d e2       	ldi	r24, 0x2D	; 45
 4f2:	67 de       	rcall	.-818    	; 0x1c2 <_Z11putChar_LCDh>
	sprintf(dis, "%i",Minute); 
 4f4:	80 91 95 00 	lds	r24, 0x0095
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <__stack+0x9b>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <__stack+0x9d>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <__stack+0x9f>
 4fe:	ed b7       	in	r30, 0x3d	; 61
 500:	fe b7       	in	r31, 0x3e	; 62
 502:	31 96       	adiw	r30, 0x01	; 1
 504:	11 83       	std	Z+1, r17	; 0x01
 506:	00 83       	st	Z, r16
 508:	f3 82       	std	Z+3, r15	; 0x03
 50a:	e2 82       	std	Z+2, r14	; 0x02
 50c:	84 83       	std	Z+4, r24	; 0x04
 50e:	15 82       	std	Z+5, r1	; 0x05
 510:	b5 d1       	rcall	.+874    	; 0x87c <sprintf>
	move_LCD(1,10); print_LCD(dis); move_LCD(1,12);putChar_LCD('-');
 512:	ed b7       	in	r30, 0x3d	; 61
 514:	fe b7       	in	r31, 0x3e	; 62
 516:	36 96       	adiw	r30, 0x06	; 6
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	fe bf       	out	0x3e, r31	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	ed bf       	out	0x3d, r30	; 61
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	6a e0       	ldi	r22, 0x0A	; 10
 526:	2f de       	rcall	.-930    	; 0x186 <_Z8move_LCDhh>
 528:	c8 01       	movw	r24, r16
 52a:	53 de       	rcall	.-858    	; 0x1d2 <_Z9print_LCDPc>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	6c e0       	ldi	r22, 0x0C	; 12
 530:	2a de       	rcall	.-940    	; 0x186 <_Z8move_LCDhh>
 532:	8d e2       	ldi	r24, 0x2D	; 45
 534:	46 de       	rcall	.-884    	; 0x1c2 <_Z11putChar_LCDh>
	sprintf(dis, "%i",Second); 
 536:	80 91 94 00 	lds	r24, 0x0094
 53a:	00 d0       	rcall	.+0      	; 0x53c <__stack+0xdd>
 53c:	00 d0       	rcall	.+0      	; 0x53e <__stack+0xdf>
 53e:	00 d0       	rcall	.+0      	; 0x540 <__stack+0xe1>
 540:	ed b7       	in	r30, 0x3d	; 61
 542:	fe b7       	in	r31, 0x3e	; 62
 544:	31 96       	adiw	r30, 0x01	; 1
 546:	11 83       	std	Z+1, r17	; 0x01
 548:	00 83       	st	Z, r16
 54a:	f3 82       	std	Z+3, r15	; 0x03
 54c:	e2 82       	std	Z+2, r14	; 0x02
 54e:	84 83       	std	Z+4, r24	; 0x04
 550:	15 82       	std	Z+5, r1	; 0x05
 552:	94 d1       	rcall	.+808    	; 0x87c <sprintf>
	move_LCD(1,13); print_LCD(dis);
 554:	8d b7       	in	r24, 0x3d	; 61
 556:	9e b7       	in	r25, 0x3e	; 62
 558:	06 96       	adiw	r24, 0x06	; 6
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	9e bf       	out	0x3e, r25	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	8d bf       	out	0x3d, r24	; 61
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	6d e0       	ldi	r22, 0x0D	; 13
 568:	0e de       	rcall	.-996    	; 0x186 <_Z8move_LCDhh>
 56a:	c8 01       	movw	r24, r16
 56c:	32 de       	rcall	.-924    	; 0x1d2 <_Z9print_LCDPc>
	if (Mode !=0){ //mode 12h
 56e:	80 91 9b 00 	lds	r24, 0x009B
 572:	88 23       	and	r24, r24
 574:	61 f0       	breq	.+24     	; 0x58e <__stack+0x12f>
		move_LCD(1,16);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	60 e1       	ldi	r22, 0x10	; 16
 57a:	05 de       	rcall	.-1014   	; 0x186 <_Z8move_LCDhh>
		if (bit_is_set(tData[2],5))  putChar_LCD('P'); //kiem tra bit AP, if AP=1
 57c:	80 91 a0 00 	lds	r24, 0x00A0
 580:	85 ff       	sbrs	r24, 5
 582:	03 c0       	rjmp	.+6      	; 0x58a <__stack+0x12b>
 584:	80 e5       	ldi	r24, 0x50	; 80
 586:	1d de       	rcall	.-966    	; 0x1c2 <_Z11putChar_LCDh>
 588:	02 c0       	rjmp	.+4      	; 0x58e <__stack+0x12f>
		else putChar_LCD('A');
 58a:	81 e4       	ldi	r24, 0x41	; 65
 58c:	1a de       	rcall	.-972    	; 0x1c2 <_Z11putChar_LCDh>
	}	
	//in nam-thang-ngay
	move_LCD(2,1);
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	f9 dd       	rcall	.-1038   	; 0x186 <_Z8move_LCDhh>
	print_LCD("Date: ");	
 594:	8a e6       	ldi	r24, 0x6A	; 106
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	1c de       	rcall	.-968    	; 0x1d2 <_Z9print_LCDPc>
	sprintf(dis, "%i",Year);	
 59a:	20 91 9a 00 	lds	r18, 0x009A
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <__stack+0x141>
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <__stack+0x143>
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <__stack+0x145>
 5a4:	ed b7       	in	r30, 0x3d	; 61
 5a6:	fe b7       	in	r31, 0x3e	; 62
 5a8:	31 96       	adiw	r30, 0x01	; 1
 5aa:	86 ea       	ldi	r24, 0xA6	; 166
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	80 83       	st	Z, r24
 5b2:	87 e6       	ldi	r24, 0x67	; 103
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	93 83       	std	Z+3, r25	; 0x03
 5b8:	82 83       	std	Z+2, r24	; 0x02
 5ba:	24 83       	std	Z+4, r18	; 0x04
 5bc:	15 82       	std	Z+5, r1	; 0x05
 5be:	5e d1       	rcall	.+700    	; 0x87c <sprintf>
	move_LCD(2,7);
 5c0:	ed b7       	in	r30, 0x3d	; 61
 5c2:	fe b7       	in	r31, 0x3e	; 62
 5c4:	36 96       	adiw	r30, 0x06	; 6
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	fe bf       	out	0x3e, r31	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	ed bf       	out	0x3d, r30	; 61
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	67 e0       	ldi	r22, 0x07	; 7
 5d4:	d8 dd       	rcall	.-1104   	; 0x186 <_Z8move_LCDhh>
	if (Year<10) putChar_LCD('0'); // neu nam <10, in them so 0 ben trai, vi du 09 
 5d6:	80 91 9a 00 	lds	r24, 0x009A
 5da:	8a 30       	cpi	r24, 0x0A	; 10
 5dc:	10 f4       	brcc	.+4      	; 0x5e2 <__stack+0x183>
 5de:	80 e3       	ldi	r24, 0x30	; 48
 5e0:	f0 dd       	rcall	.-1056   	; 0x1c2 <_Z11putChar_LCDh>
	print_LCD(dis); move_LCD(2,9); putChar_LCD('-'); //in Nam	
 5e2:	06 ea       	ldi	r16, 0xA6	; 166
 5e4:	10 e0       	ldi	r17, 0x00	; 0
 5e6:	c8 01       	movw	r24, r16
 5e8:	f4 dd       	rcall	.-1048   	; 0x1d2 <_Z9print_LCDPc>
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	69 e0       	ldi	r22, 0x09	; 9
 5ee:	cb dd       	rcall	.-1130   	; 0x186 <_Z8move_LCDhh>
 5f0:	8d e2       	ldi	r24, 0x2D	; 45
 5f2:	e7 dd       	rcall	.-1074   	; 0x1c2 <_Z11putChar_LCDh>
	sprintf(dis, "%i",Month); 
 5f4:	80 91 99 00 	lds	r24, 0x0099
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <__stack+0x19b>
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <__stack+0x19d>
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <__stack+0x19f>
 5fe:	ed b7       	in	r30, 0x3d	; 61
 600:	fe b7       	in	r31, 0x3e	; 62
 602:	31 96       	adiw	r30, 0x01	; 1
 604:	11 83       	std	Z+1, r17	; 0x01
 606:	00 83       	st	Z, r16
 608:	0f 2e       	mov	r0, r31
 60a:	f7 e6       	ldi	r31, 0x67	; 103
 60c:	ef 2e       	mov	r14, r31
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ff 2e       	mov	r15, r31
 612:	f0 2d       	mov	r31, r0
 614:	f3 82       	std	Z+3, r15	; 0x03
 616:	e2 82       	std	Z+2, r14	; 0x02
 618:	84 83       	std	Z+4, r24	; 0x04
 61a:	15 82       	std	Z+5, r1	; 0x05
 61c:	2f d1       	rcall	.+606    	; 0x87c <sprintf>
	move_LCD(2,10); print_LCD(dis); move_LCD(2,12);putChar_LCD('-'); //in thang
 61e:	8d b7       	in	r24, 0x3d	; 61
 620:	9e b7       	in	r25, 0x3e	; 62
 622:	06 96       	adiw	r24, 0x06	; 6
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	9e bf       	out	0x3e, r25	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	8d bf       	out	0x3d, r24	; 61
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	6a e0       	ldi	r22, 0x0A	; 10
 632:	a9 dd       	rcall	.-1198   	; 0x186 <_Z8move_LCDhh>
 634:	c8 01       	movw	r24, r16
 636:	cd dd       	rcall	.-1126   	; 0x1d2 <_Z9print_LCDPc>
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	6c e0       	ldi	r22, 0x0C	; 12
 63c:	a4 dd       	rcall	.-1208   	; 0x186 <_Z8move_LCDhh>
 63e:	8d e2       	ldi	r24, 0x2D	; 45
 640:	c0 dd       	rcall	.-1152   	; 0x1c2 <_Z11putChar_LCDh>
	sprintf(dis, "%i",Date);  
 642:	80 91 98 00 	lds	r24, 0x0098
 646:	00 d0       	rcall	.+0      	; 0x648 <__stack+0x1e9>
 648:	00 d0       	rcall	.+0      	; 0x64a <__stack+0x1eb>
 64a:	00 d0       	rcall	.+0      	; 0x64c <__stack+0x1ed>
 64c:	ed b7       	in	r30, 0x3d	; 61
 64e:	fe b7       	in	r31, 0x3e	; 62
 650:	31 96       	adiw	r30, 0x01	; 1
 652:	11 83       	std	Z+1, r17	; 0x01
 654:	00 83       	st	Z, r16
 656:	f3 82       	std	Z+3, r15	; 0x03
 658:	e2 82       	std	Z+2, r14	; 0x02
 65a:	84 83       	std	Z+4, r24	; 0x04
 65c:	15 82       	std	Z+5, r1	; 0x05
 65e:	0e d1       	rcall	.+540    	; 0x87c <sprintf>
	move_LCD(2,13); print_LCD(dis);	//in Ngay
 660:	ed b7       	in	r30, 0x3d	; 61
 662:	fe b7       	in	r31, 0x3e	; 62
 664:	36 96       	adiw	r30, 0x06	; 6
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	fe bf       	out	0x3e, r31	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	ed bf       	out	0x3d, r30	; 61
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	6d e0       	ldi	r22, 0x0D	; 13
 674:	88 dd       	rcall	.-1264   	; 0x186 <_Z8move_LCDhh>
 676:	c8 01       	movw	r24, r16
 678:	ac dd       	rcall	.-1192   	; 0x1d2 <_Z9print_LCDPc>
}
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	ff 90       	pop	r15
 680:	ef 90       	pop	r14
 682:	08 95       	ret

00000684 <main>:

//chuong trinh chinh
int main(void){	
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
	//khoi dong LCD-----------------------
	init_LCD();
 68c:	4b dd       	rcall	.-1386   	; 0x124 <_Z8init_LCDv>
	clr_LCD();	
 68e:	90 dd       	rcall	.-1248   	; 0x1b0 <_Z7clr_LCDv>
	move_LCD(1,1);
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	78 dd       	rcall	.-1296   	; 0x186 <_Z8move_LCDhh>
	print_LCD("Hello AVR-DS1307");
 696:	81 e7       	ldi	r24, 0x71	; 113
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	9b dd       	rcall	.-1226   	; 0x1d2 <_Z9print_LCDPc>
	move_LCD(2,1);
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	72 dd       	rcall	.-1308   	; 0x186 <_Z8move_LCDhh>
	print_LCD("www.hocavr.com");
 6a2:	82 e8       	ldi	r24, 0x82	; 130
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	95 dd       	rcall	.-1238   	; 0x1d2 <_Z9print_LCDPc>
 6a8:	20 e1       	ldi	r18, 0x10	; 16
 6aa:	37 e2       	ldi	r19, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 6ac:	49 e1       	ldi	r20, 0x19	; 25
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	ca 01       	movw	r24, r20
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ba:	d1 f7       	brne	.-12     	; 0x6b0 <main+0x2c>
	_delay_ms(1000);
	//------------------------------------
	
	//khoi dong Timer0 lam bo dinh thi 1s------------------------------------------------
	TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//CS02=1, CS01=0, CS00=1: chon Prescaler=1024 
 6bc:	85 e0       	ldi	r24, 0x05	; 5
 6be:	83 bf       	out	0x33, r24	; 51
    TIMSK=(1<<TOIE0);						//cho phep ngat khi co tran o T/C0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	89 bf       	out	0x39, r24	; 57
    sei();                      			//set bit I cho phep ngat toan cuc
 6c4:	78 94       	sei
	//----------------------------------------------------------------
	
	//khoi dong gia tri ghi vao DS1307---------------------------------------------------
	tData[0]=Dec2BCD(Second); 
 6c6:	80 91 94 00 	lds	r24, 0x0094
 6ca:	a3 de       	rcall	.-698    	; 0x412 <_Z7Dec2BCDh>
 6cc:	0e e9       	ldi	r16, 0x9E	; 158
 6ce:	10 e0       	ldi	r17, 0x00	; 0
 6d0:	f8 01       	movw	r30, r16
 6d2:	81 93       	st	Z+, r24
 6d4:	8f 01       	movw	r16, r30
	tData[1]=Dec2BCD(Minute); 
 6d6:	80 91 95 00 	lds	r24, 0x0095
 6da:	9b de       	rcall	.-714    	; 0x412 <_Z7Dec2BCDh>
 6dc:	f8 01       	movw	r30, r16
 6de:	80 83       	st	Z, r24
	if (Mode!=0) tData[2]=Dec2BCD(Hour)|(Mode<<6)|(AP<<5); //mode 12h
 6e0:	80 91 9b 00 	lds	r24, 0x009B
 6e4:	88 23       	and	r24, r24
 6e6:	99 f0       	breq	.+38     	; 0x70e <main+0x8a>
 6e8:	80 91 96 00 	lds	r24, 0x0096
 6ec:	92 de       	rcall	.-732    	; 0x412 <_Z7Dec2BCDh>
 6ee:	20 91 9b 00 	lds	r18, 0x009B
 6f2:	90 91 9c 00 	lds	r25, 0x009C
 6f6:	22 95       	swap	r18
 6f8:	22 0f       	add	r18, r18
 6fa:	22 0f       	add	r18, r18
 6fc:	20 7c       	andi	r18, 0xC0	; 192
 6fe:	92 95       	swap	r25
 700:	99 0f       	add	r25, r25
 702:	90 7e       	andi	r25, 0xE0	; 224
 704:	92 2b       	or	r25, r18
 706:	98 2b       	or	r25, r24
 708:	90 93 a0 00 	sts	0x00A0, r25
 70c:	05 c0       	rjmp	.+10     	; 0x718 <main+0x94>
	else tData[2]=Dec2BCD(Hour);
 70e:	80 91 96 00 	lds	r24, 0x0096
 712:	7f de       	rcall	.-770    	; 0x412 <_Z7Dec2BCDh>
 714:	80 93 a0 00 	sts	0x00A0, r24
	tData[3]=Dec2BCD(Day);
 718:	80 91 97 00 	lds	r24, 0x0097
 71c:	7a de       	rcall	.-780    	; 0x412 <_Z7Dec2BCDh>
 71e:	0f 2e       	mov	r0, r31
 720:	f1 ea       	ldi	r31, 0xA1	; 161
 722:	ef 2e       	mov	r14, r31
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ff 2e       	mov	r15, r31
 728:	f0 2d       	mov	r31, r0
 72a:	f7 01       	movw	r30, r14
 72c:	81 93       	st	Z+, r24
 72e:	8f 01       	movw	r16, r30
	tData[4]=Dec2BCD(Date);
 730:	80 91 98 00 	lds	r24, 0x0098
 734:	6e de       	rcall	.-804    	; 0x412 <_Z7Dec2BCDh>
 736:	f8 01       	movw	r30, r16
 738:	80 83       	st	Z, r24
	tData[5]=Dec2BCD(Month); 
 73a:	80 91 99 00 	lds	r24, 0x0099
 73e:	69 de       	rcall	.-814    	; 0x412 <_Z7Dec2BCDh>
 740:	f7 01       	movw	r30, r14
 742:	82 83       	std	Z+2, r24	; 0x02
	tData[6]=Dec2BCD(Year); 		
 744:	80 91 9a 00 	lds	r24, 0x009A
 748:	64 de       	rcall	.-824    	; 0x412 <_Z7Dec2BCDh>
 74a:	f7 01       	movw	r30, r14
 74c:	83 83       	std	Z+3, r24	; 0x03
	TWI_Init(); //khoi dong TWI		
 74e:	55 dd       	rcall	.-1366   	; 0x1fa <_Z8TWI_Initv>
	TWI_DS1307_wblock(0x00, tData, 7); //ghi lien tiep cac bien thoi gian vao DS1307
 750:	8d ef       	ldi	r24, 0xFD	; 253
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	e8 0e       	add	r14, r24
 756:	f9 1e       	adc	r15, r25
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	b7 01       	movw	r22, r14
 75c:	47 e0       	ldi	r20, 0x07	; 7
 75e:	82 dd       	rcall	.-1276   	; 0x264 <_Z17TWI_DS1307_wblockhPhh>
 760:	0a ef       	ldi	r16, 0xFA	; 250
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	c8 01       	movw	r24, r16
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <main+0xe2>
	//----------------------------------------------------------------------------------
	_delay_ms(1);	//cho DS1307 xu li 
	
	//doc va hien thi thoi gian lan dau tien******************************************
	TWI_DS1307_wadr(0x00); //set dia chi ve 0
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	4c dd       	rcall	.-1384   	; 0x206 <_Z15TWI_DS1307_wadrh>
 76e:	c8 01       	movw	r24, r16
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <main+0xec>
	_delay_ms(1);			//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7); //doc ca khoi thoi gian (7 bytes)	
 774:	c7 01       	movw	r24, r14
 776:	67 e0       	ldi	r22, 0x07	; 7
 778:	cc dd       	rcall	.-1128   	; 0x312 <_Z17TWI_DS1307_rblockPhh>
	Display(); // hien thi ket qua len LCD	
 77a:	56 de       	rcall	.-852    	; 0x428 <_Z7Displayv>
 77c:	ff cf       	rjmp	.-2      	; 0x77c <main+0xf8>

0000077e <__vector_9>:
		
	}
	return 0;
}

ISR (TIMER0_OVF_vect ){           
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
	Time_count++;
 7a4:	80 91 a5 00 	lds	r24, 0x00A5
 7a8:	8f 5f       	subi	r24, 0xFF	; 255
 7aa:	80 93 a5 00 	sts	0x00A5, r24
	if(Time_count>=10){ 
 7ae:	8a 30       	cpi	r24, 0x0A	; 10
 7b0:	08 f4       	brcc	.+2      	; 0x7b4 <__vector_9+0x36>
 7b2:	45 c0       	rjmp	.+138    	; 0x83e <__vector_9+0xc0>
		//doc DS1307
		TWI_DS1307_wadr(0x00); 				//set dia chi ve 0
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	27 dd       	rcall	.-1458   	; 0x206 <_Z15TWI_DS1307_wadrh>
 7b8:	8a ef       	ldi	r24, 0xFA	; 250
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <__vector_9+0x3e>
		_delay_ms(1);		   				//cho DS1307 xu li 
		TWI_DS1307_rblock(tData,7); 	//doc ca khoi thoi gian (7 bytes)		
 7c0:	0e e9       	ldi	r16, 0x9E	; 158
 7c2:	10 e0       	ldi	r17, 0x00	; 0
 7c4:	c8 01       	movw	r24, r16
 7c6:	67 e0       	ldi	r22, 0x07	; 7
 7c8:	a4 dd       	rcall	.-1208   	; 0x312 <_Z17TWI_DS1307_rblockPhh>
		//hien thi ket qua len LCD
		if(BCD2Dec(tData[0]) !=Second){ 	//chi hien thi ket qua khi da qua 1s
 7ca:	f8 01       	movw	r30, r16
 7cc:	00 81       	ld	r16, Z
 7ce:	80 2f       	mov	r24, r16
 7d0:	08 de       	rcall	.-1008   	; 0x3e2 <_Z7BCD2Dech>
 7d2:	90 91 94 00 	lds	r25, 0x0094
 7d6:	89 17       	cp	r24, r25
 7d8:	81 f1       	breq	.+96     	; 0x83a <__vector_9+0xbc>
			Second=BCD2Dec(tData[0] & 0x7F);
 7da:	80 2f       	mov	r24, r16
 7dc:	8f 77       	andi	r24, 0x7F	; 127
 7de:	01 de       	rcall	.-1022   	; 0x3e2 <_Z7BCD2Dech>
 7e0:	80 93 94 00 	sts	0x0094, r24
			sprintf(dis, "%i",Second); 
 7e4:	20 91 94 00 	lds	r18, 0x0094
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <__vector_9+0x6c>
 7ea:	00 d0       	rcall	.+0      	; 0x7ec <__vector_9+0x6e>
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <__vector_9+0x70>
 7ee:	ed b7       	in	r30, 0x3d	; 61
 7f0:	fe b7       	in	r31, 0x3e	; 62
 7f2:	31 96       	adiw	r30, 0x01	; 1
 7f4:	06 ea       	ldi	r16, 0xA6	; 166
 7f6:	10 e0       	ldi	r17, 0x00	; 0
 7f8:	11 83       	std	Z+1, r17	; 0x01
 7fa:	00 83       	st	Z, r16
 7fc:	87 e6       	ldi	r24, 0x67	; 103
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	93 83       	std	Z+3, r25	; 0x03
 802:	82 83       	std	Z+2, r24	; 0x02
 804:	24 83       	std	Z+4, r18	; 0x04
 806:	15 82       	std	Z+5, r1	; 0x05
 808:	39 d0       	rcall	.+114    	; 0x87c <sprintf>
			move_LCD(1,13); print_LCD("  ");
 80a:	8d b7       	in	r24, 0x3d	; 61
 80c:	9e b7       	in	r25, 0x3e	; 62
 80e:	06 96       	adiw	r24, 0x06	; 6
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	f8 94       	cli
 814:	9e bf       	out	0x3e, r25	; 62
 816:	0f be       	out	0x3f, r0	; 63
 818:	8d bf       	out	0x3d, r24	; 61
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	6d e0       	ldi	r22, 0x0D	; 13
 81e:	b3 dc       	rcall	.-1690   	; 0x186 <_Z8move_LCDhh>
 820:	81 e9       	ldi	r24, 0x91	; 145
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	d6 dc       	rcall	.-1620   	; 0x1d2 <_Z9print_LCDPc>
			move_LCD(1,13); print_LCD(dis);
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	6d e0       	ldi	r22, 0x0D	; 13
 82a:	ad dc       	rcall	.-1702   	; 0x186 <_Z8move_LCDhh>
 82c:	c8 01       	movw	r24, r16
 82e:	d1 dc       	rcall	.-1630   	; 0x1d2 <_Z9print_LCDPc>
			if (Second==0) Display(); 		//moi phut cap nhat 1 lan			
 830:	80 91 94 00 	lds	r24, 0x0094
 834:	88 23       	and	r24, r24
 836:	09 f4       	brne	.+2      	; 0x83a <__vector_9+0xbc>
 838:	f7 dd       	rcall	.-1042   	; 0x428 <_Z7Displayv>
		}
		
		Time_count=0; 
 83a:	10 92 a5 00 	sts	0x00A5, r1
	}
}
 83e:	ff 91       	pop	r31
 840:	ef 91       	pop	r30
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	7f 91       	pop	r23
 84c:	6f 91       	pop	r22
 84e:	5f 91       	pop	r21
 850:	4f 91       	pop	r20
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <__udivmodqi4>:
 864:	99 1b       	sub	r25, r25
 866:	79 e0       	ldi	r23, 0x09	; 9
 868:	04 c0       	rjmp	.+8      	; 0x872 <__udivmodqi4_ep>

0000086a <__udivmodqi4_loop>:
 86a:	99 1f       	adc	r25, r25
 86c:	96 17       	cp	r25, r22
 86e:	08 f0       	brcs	.+2      	; 0x872 <__udivmodqi4_ep>
 870:	96 1b       	sub	r25, r22

00000872 <__udivmodqi4_ep>:
 872:	88 1f       	adc	r24, r24
 874:	7a 95       	dec	r23
 876:	c9 f7       	brne	.-14     	; 0x86a <__udivmodqi4_loop>
 878:	80 95       	com	r24
 87a:	08 95       	ret

0000087c <sprintf>:
 87c:	ae e0       	ldi	r26, 0x0E	; 14
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	e3 e4       	ldi	r30, 0x43	; 67
 882:	f4 e0       	ldi	r31, 0x04	; 4
 884:	98 c2       	rjmp	.+1328   	; 0xdb6 <__prologue_saves__+0x1c>
 886:	0d 89       	ldd	r16, Y+21	; 0x15
 888:	1e 89       	ldd	r17, Y+22	; 0x16
 88a:	86 e0       	ldi	r24, 0x06	; 6
 88c:	8c 83       	std	Y+4, r24	; 0x04
 88e:	1a 83       	std	Y+2, r17	; 0x02
 890:	09 83       	std	Y+1, r16	; 0x01
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	9f e7       	ldi	r25, 0x7F	; 127
 896:	9e 83       	std	Y+6, r25	; 0x06
 898:	8d 83       	std	Y+5, r24	; 0x05
 89a:	9e 01       	movw	r18, r28
 89c:	27 5e       	subi	r18, 0xE7	; 231
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	ce 01       	movw	r24, r28
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	6f 89       	ldd	r22, Y+23	; 0x17
 8a6:	78 8d       	ldd	r23, Y+24	; 0x18
 8a8:	a9 01       	movw	r20, r18
 8aa:	09 d0       	rcall	.+18     	; 0x8be <vfprintf>
 8ac:	2f 81       	ldd	r18, Y+7	; 0x07
 8ae:	38 85       	ldd	r19, Y+8	; 0x08
 8b0:	02 0f       	add	r16, r18
 8b2:	13 1f       	adc	r17, r19
 8b4:	f8 01       	movw	r30, r16
 8b6:	10 82       	st	Z, r1
 8b8:	2e 96       	adiw	r28, 0x0e	; 14
 8ba:	e4 e0       	ldi	r30, 0x04	; 4
 8bc:	98 c2       	rjmp	.+1328   	; 0xdee <__epilogue_restores__+0x1c>

000008be <vfprintf>:
 8be:	ab e0       	ldi	r26, 0x0B	; 11
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e4 e6       	ldi	r30, 0x64	; 100
 8c4:	f4 e0       	ldi	r31, 0x04	; 4
 8c6:	69 c2       	rjmp	.+1234   	; 0xd9a <__prologue_saves__>
 8c8:	3c 01       	movw	r6, r24
 8ca:	2b 01       	movw	r4, r22
 8cc:	5a 01       	movw	r10, r20
 8ce:	fc 01       	movw	r30, r24
 8d0:	17 82       	std	Z+7, r1	; 0x07
 8d2:	16 82       	std	Z+6, r1	; 0x06
 8d4:	83 81       	ldd	r24, Z+3	; 0x03
 8d6:	81 fd       	sbrc	r24, 1
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <vfprintf+0x22>
 8da:	6f ef       	ldi	r22, 0xFF	; 255
 8dc:	7f ef       	ldi	r23, 0xFF	; 255
 8de:	b9 c1       	rjmp	.+882    	; 0xc52 <vfprintf+0x394>
 8e0:	9a e0       	ldi	r25, 0x0A	; 10
 8e2:	89 2e       	mov	r8, r25
 8e4:	1e 01       	movw	r2, r28
 8e6:	08 94       	sec
 8e8:	21 1c       	adc	r2, r1
 8ea:	31 1c       	adc	r3, r1
 8ec:	f3 01       	movw	r30, r6
 8ee:	23 81       	ldd	r18, Z+3	; 0x03
 8f0:	f2 01       	movw	r30, r4
 8f2:	23 fd       	sbrc	r18, 3
 8f4:	85 91       	lpm	r24, Z+
 8f6:	23 ff       	sbrs	r18, 3
 8f8:	81 91       	ld	r24, Z+
 8fa:	2f 01       	movw	r4, r30
 8fc:	88 23       	and	r24, r24
 8fe:	09 f4       	brne	.+2      	; 0x902 <vfprintf+0x44>
 900:	a5 c1       	rjmp	.+842    	; 0xc4c <vfprintf+0x38e>
 902:	85 32       	cpi	r24, 0x25	; 37
 904:	39 f4       	brne	.+14     	; 0x914 <vfprintf+0x56>
 906:	23 fd       	sbrc	r18, 3
 908:	85 91       	lpm	r24, Z+
 90a:	23 ff       	sbrs	r18, 3
 90c:	81 91       	ld	r24, Z+
 90e:	2f 01       	movw	r4, r30
 910:	85 32       	cpi	r24, 0x25	; 37
 912:	21 f4       	brne	.+8      	; 0x91c <vfprintf+0x5e>
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	b3 01       	movw	r22, r6
 918:	b6 d1       	rcall	.+876    	; 0xc86 <fputc>
 91a:	e8 cf       	rjmp	.-48     	; 0x8ec <vfprintf+0x2e>
 91c:	98 2f       	mov	r25, r24
 91e:	ff 24       	eor	r15, r15
 920:	ee 24       	eor	r14, r14
 922:	99 24       	eor	r9, r9
 924:	ff e1       	ldi	r31, 0x1F	; 31
 926:	ff 15       	cp	r31, r15
 928:	d0 f0       	brcs	.+52     	; 0x95e <vfprintf+0xa0>
 92a:	9b 32       	cpi	r25, 0x2B	; 43
 92c:	69 f0       	breq	.+26     	; 0x948 <vfprintf+0x8a>
 92e:	9c 32       	cpi	r25, 0x2C	; 44
 930:	28 f4       	brcc	.+10     	; 0x93c <vfprintf+0x7e>
 932:	90 32       	cpi	r25, 0x20	; 32
 934:	59 f0       	breq	.+22     	; 0x94c <vfprintf+0x8e>
 936:	93 32       	cpi	r25, 0x23	; 35
 938:	91 f4       	brne	.+36     	; 0x95e <vfprintf+0xa0>
 93a:	0e c0       	rjmp	.+28     	; 0x958 <vfprintf+0x9a>
 93c:	9d 32       	cpi	r25, 0x2D	; 45
 93e:	49 f0       	breq	.+18     	; 0x952 <vfprintf+0x94>
 940:	90 33       	cpi	r25, 0x30	; 48
 942:	69 f4       	brne	.+26     	; 0x95e <vfprintf+0xa0>
 944:	41 e0       	ldi	r20, 0x01	; 1
 946:	24 c0       	rjmp	.+72     	; 0x990 <vfprintf+0xd2>
 948:	52 e0       	ldi	r21, 0x02	; 2
 94a:	f5 2a       	or	r15, r21
 94c:	84 e0       	ldi	r24, 0x04	; 4
 94e:	f8 2a       	or	r15, r24
 950:	28 c0       	rjmp	.+80     	; 0x9a2 <vfprintf+0xe4>
 952:	98 e0       	ldi	r25, 0x08	; 8
 954:	f9 2a       	or	r15, r25
 956:	25 c0       	rjmp	.+74     	; 0x9a2 <vfprintf+0xe4>
 958:	e0 e1       	ldi	r30, 0x10	; 16
 95a:	fe 2a       	or	r15, r30
 95c:	22 c0       	rjmp	.+68     	; 0x9a2 <vfprintf+0xe4>
 95e:	f7 fc       	sbrc	r15, 7
 960:	29 c0       	rjmp	.+82     	; 0x9b4 <vfprintf+0xf6>
 962:	89 2f       	mov	r24, r25
 964:	80 53       	subi	r24, 0x30	; 48
 966:	8a 30       	cpi	r24, 0x0A	; 10
 968:	70 f4       	brcc	.+28     	; 0x986 <vfprintf+0xc8>
 96a:	f6 fe       	sbrs	r15, 6
 96c:	05 c0       	rjmp	.+10     	; 0x978 <vfprintf+0xba>
 96e:	98 9c       	mul	r9, r8
 970:	90 2c       	mov	r9, r0
 972:	11 24       	eor	r1, r1
 974:	98 0e       	add	r9, r24
 976:	15 c0       	rjmp	.+42     	; 0x9a2 <vfprintf+0xe4>
 978:	e8 9c       	mul	r14, r8
 97a:	e0 2c       	mov	r14, r0
 97c:	11 24       	eor	r1, r1
 97e:	e8 0e       	add	r14, r24
 980:	f0 e2       	ldi	r31, 0x20	; 32
 982:	ff 2a       	or	r15, r31
 984:	0e c0       	rjmp	.+28     	; 0x9a2 <vfprintf+0xe4>
 986:	9e 32       	cpi	r25, 0x2E	; 46
 988:	29 f4       	brne	.+10     	; 0x994 <vfprintf+0xd6>
 98a:	f6 fc       	sbrc	r15, 6
 98c:	5f c1       	rjmp	.+702    	; 0xc4c <vfprintf+0x38e>
 98e:	40 e4       	ldi	r20, 0x40	; 64
 990:	f4 2a       	or	r15, r20
 992:	07 c0       	rjmp	.+14     	; 0x9a2 <vfprintf+0xe4>
 994:	9c 36       	cpi	r25, 0x6C	; 108
 996:	19 f4       	brne	.+6      	; 0x99e <vfprintf+0xe0>
 998:	50 e8       	ldi	r21, 0x80	; 128
 99a:	f5 2a       	or	r15, r21
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0xe4>
 99e:	98 36       	cpi	r25, 0x68	; 104
 9a0:	49 f4       	brne	.+18     	; 0x9b4 <vfprintf+0xf6>
 9a2:	f2 01       	movw	r30, r4
 9a4:	23 fd       	sbrc	r18, 3
 9a6:	95 91       	lpm	r25, Z+
 9a8:	23 ff       	sbrs	r18, 3
 9aa:	91 91       	ld	r25, Z+
 9ac:	2f 01       	movw	r4, r30
 9ae:	99 23       	and	r25, r25
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <vfprintf+0xf6>
 9b2:	b8 cf       	rjmp	.-144    	; 0x924 <vfprintf+0x66>
 9b4:	89 2f       	mov	r24, r25
 9b6:	85 54       	subi	r24, 0x45	; 69
 9b8:	83 30       	cpi	r24, 0x03	; 3
 9ba:	18 f0       	brcs	.+6      	; 0x9c2 <vfprintf+0x104>
 9bc:	80 52       	subi	r24, 0x20	; 32
 9be:	83 30       	cpi	r24, 0x03	; 3
 9c0:	38 f4       	brcc	.+14     	; 0x9d0 <vfprintf+0x112>
 9c2:	44 e0       	ldi	r20, 0x04	; 4
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	a4 0e       	add	r10, r20
 9c8:	b5 1e       	adc	r11, r21
 9ca:	5f e3       	ldi	r21, 0x3F	; 63
 9cc:	59 83       	std	Y+1, r21	; 0x01
 9ce:	0f c0       	rjmp	.+30     	; 0x9ee <vfprintf+0x130>
 9d0:	93 36       	cpi	r25, 0x63	; 99
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <vfprintf+0x122>
 9d4:	93 37       	cpi	r25, 0x73	; 115
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <vfprintf+0x138>
 9d8:	93 35       	cpi	r25, 0x53	; 83
 9da:	09 f0       	breq	.+2      	; 0x9de <vfprintf+0x120>
 9dc:	52 c0       	rjmp	.+164    	; 0xa82 <vfprintf+0x1c4>
 9de:	1f c0       	rjmp	.+62     	; 0xa1e <vfprintf+0x160>
 9e0:	f5 01       	movw	r30, r10
 9e2:	80 81       	ld	r24, Z
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	42 e0       	ldi	r20, 0x02	; 2
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	a4 0e       	add	r10, r20
 9ec:	b5 1e       	adc	r11, r21
 9ee:	61 01       	movw	r12, r2
 9f0:	01 e0       	ldi	r16, 0x01	; 1
 9f2:	10 e0       	ldi	r17, 0x00	; 0
 9f4:	11 c0       	rjmp	.+34     	; 0xa18 <vfprintf+0x15a>
 9f6:	f5 01       	movw	r30, r10
 9f8:	c0 80       	ld	r12, Z
 9fa:	d1 80       	ldd	r13, Z+1	; 0x01
 9fc:	f6 fc       	sbrc	r15, 6
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <vfprintf+0x148>
 a00:	6f ef       	ldi	r22, 0xFF	; 255
 a02:	7f ef       	ldi	r23, 0xFF	; 255
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x14c>
 a06:	69 2d       	mov	r22, r9
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	42 e0       	ldi	r20, 0x02	; 2
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	a4 0e       	add	r10, r20
 a10:	b5 1e       	adc	r11, r21
 a12:	c6 01       	movw	r24, r12
 a14:	2d d1       	rcall	.+602    	; 0xc70 <strnlen>
 a16:	8c 01       	movw	r16, r24
 a18:	5f e7       	ldi	r21, 0x7F	; 127
 a1a:	f5 22       	and	r15, r21
 a1c:	13 c0       	rjmp	.+38     	; 0xa44 <vfprintf+0x186>
 a1e:	f5 01       	movw	r30, r10
 a20:	c0 80       	ld	r12, Z
 a22:	d1 80       	ldd	r13, Z+1	; 0x01
 a24:	f6 fc       	sbrc	r15, 6
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x170>
 a28:	6f ef       	ldi	r22, 0xFF	; 255
 a2a:	7f ef       	ldi	r23, 0xFF	; 255
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <vfprintf+0x174>
 a2e:	69 2d       	mov	r22, r9
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	42 e0       	ldi	r20, 0x02	; 2
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	a4 0e       	add	r10, r20
 a38:	b5 1e       	adc	r11, r21
 a3a:	c6 01       	movw	r24, r12
 a3c:	0e d1       	rcall	.+540    	; 0xc5a <strnlen_P>
 a3e:	8c 01       	movw	r16, r24
 a40:	50 e8       	ldi	r21, 0x80	; 128
 a42:	f5 2a       	or	r15, r21
 a44:	f3 fe       	sbrs	r15, 3
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <vfprintf+0x196>
 a48:	18 c0       	rjmp	.+48     	; 0xa7a <vfprintf+0x1bc>
 a4a:	80 e2       	ldi	r24, 0x20	; 32
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	b3 01       	movw	r22, r6
 a50:	1a d1       	rcall	.+564    	; 0xc86 <fputc>
 a52:	ea 94       	dec	r14
 a54:	8e 2d       	mov	r24, r14
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	08 17       	cp	r16, r24
 a5a:	19 07       	cpc	r17, r25
 a5c:	b0 f3       	brcs	.-20     	; 0xa4a <vfprintf+0x18c>
 a5e:	0d c0       	rjmp	.+26     	; 0xa7a <vfprintf+0x1bc>
 a60:	f6 01       	movw	r30, r12
 a62:	f7 fc       	sbrc	r15, 7
 a64:	85 91       	lpm	r24, Z+
 a66:	f7 fe       	sbrs	r15, 7
 a68:	81 91       	ld	r24, Z+
 a6a:	6f 01       	movw	r12, r30
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	b3 01       	movw	r22, r6
 a70:	0a d1       	rcall	.+532    	; 0xc86 <fputc>
 a72:	e1 10       	cpse	r14, r1
 a74:	ea 94       	dec	r14
 a76:	01 50       	subi	r16, 0x01	; 1
 a78:	10 40       	sbci	r17, 0x00	; 0
 a7a:	01 15       	cp	r16, r1
 a7c:	11 05       	cpc	r17, r1
 a7e:	81 f7       	brne	.-32     	; 0xa60 <vfprintf+0x1a2>
 a80:	e2 c0       	rjmp	.+452    	; 0xc46 <vfprintf+0x388>
 a82:	94 36       	cpi	r25, 0x64	; 100
 a84:	11 f0       	breq	.+4      	; 0xa8a <vfprintf+0x1cc>
 a86:	99 36       	cpi	r25, 0x69	; 105
 a88:	61 f5       	brne	.+88     	; 0xae2 <vfprintf+0x224>
 a8a:	f7 fe       	sbrs	r15, 7
 a8c:	08 c0       	rjmp	.+16     	; 0xa9e <vfprintf+0x1e0>
 a8e:	f5 01       	movw	r30, r10
 a90:	20 81       	ld	r18, Z
 a92:	31 81       	ldd	r19, Z+1	; 0x01
 a94:	42 81       	ldd	r20, Z+2	; 0x02
 a96:	53 81       	ldd	r21, Z+3	; 0x03
 a98:	84 e0       	ldi	r24, 0x04	; 4
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <vfprintf+0x1f4>
 a9e:	f5 01       	movw	r30, r10
 aa0:	80 81       	ld	r24, Z
 aa2:	91 81       	ldd	r25, Z+1	; 0x01
 aa4:	9c 01       	movw	r18, r24
 aa6:	44 27       	eor	r20, r20
 aa8:	37 fd       	sbrc	r19, 7
 aaa:	40 95       	com	r20
 aac:	54 2f       	mov	r21, r20
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	a8 0e       	add	r10, r24
 ab4:	b9 1e       	adc	r11, r25
 ab6:	9f e6       	ldi	r25, 0x6F	; 111
 ab8:	f9 22       	and	r15, r25
 aba:	57 ff       	sbrs	r21, 7
 abc:	09 c0       	rjmp	.+18     	; 0xad0 <vfprintf+0x212>
 abe:	50 95       	com	r21
 ac0:	40 95       	com	r20
 ac2:	30 95       	com	r19
 ac4:	21 95       	neg	r18
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
 ac8:	4f 4f       	sbci	r20, 0xFF	; 255
 aca:	5f 4f       	sbci	r21, 0xFF	; 255
 acc:	e0 e8       	ldi	r30, 0x80	; 128
 ace:	fe 2a       	or	r15, r30
 ad0:	ca 01       	movw	r24, r20
 ad2:	b9 01       	movw	r22, r18
 ad4:	a1 01       	movw	r20, r2
 ad6:	2a e0       	ldi	r18, 0x0A	; 10
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	01 d1       	rcall	.+514    	; 0xcde <__ultoa_invert>
 adc:	d8 2e       	mov	r13, r24
 ade:	d2 18       	sub	r13, r2
 ae0:	3f c0       	rjmp	.+126    	; 0xb60 <vfprintf+0x2a2>
 ae2:	95 37       	cpi	r25, 0x75	; 117
 ae4:	29 f4       	brne	.+10     	; 0xaf0 <vfprintf+0x232>
 ae6:	1f 2d       	mov	r17, r15
 ae8:	1f 7e       	andi	r17, 0xEF	; 239
 aea:	2a e0       	ldi	r18, 0x0A	; 10
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	1d c0       	rjmp	.+58     	; 0xb2a <vfprintf+0x26c>
 af0:	1f 2d       	mov	r17, r15
 af2:	19 7f       	andi	r17, 0xF9	; 249
 af4:	9f 36       	cpi	r25, 0x6F	; 111
 af6:	61 f0       	breq	.+24     	; 0xb10 <vfprintf+0x252>
 af8:	90 37       	cpi	r25, 0x70	; 112
 afa:	20 f4       	brcc	.+8      	; 0xb04 <vfprintf+0x246>
 afc:	98 35       	cpi	r25, 0x58	; 88
 afe:	09 f0       	breq	.+2      	; 0xb02 <vfprintf+0x244>
 b00:	a5 c0       	rjmp	.+330    	; 0xc4c <vfprintf+0x38e>
 b02:	0f c0       	rjmp	.+30     	; 0xb22 <vfprintf+0x264>
 b04:	90 37       	cpi	r25, 0x70	; 112
 b06:	39 f0       	breq	.+14     	; 0xb16 <vfprintf+0x258>
 b08:	98 37       	cpi	r25, 0x78	; 120
 b0a:	09 f0       	breq	.+2      	; 0xb0e <vfprintf+0x250>
 b0c:	9f c0       	rjmp	.+318    	; 0xc4c <vfprintf+0x38e>
 b0e:	04 c0       	rjmp	.+8      	; 0xb18 <vfprintf+0x25a>
 b10:	28 e0       	ldi	r18, 0x08	; 8
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	0a c0       	rjmp	.+20     	; 0xb2a <vfprintf+0x26c>
 b16:	10 61       	ori	r17, 0x10	; 16
 b18:	14 fd       	sbrc	r17, 4
 b1a:	14 60       	ori	r17, 0x04	; 4
 b1c:	20 e1       	ldi	r18, 0x10	; 16
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	04 c0       	rjmp	.+8      	; 0xb2a <vfprintf+0x26c>
 b22:	14 fd       	sbrc	r17, 4
 b24:	16 60       	ori	r17, 0x06	; 6
 b26:	20 e1       	ldi	r18, 0x10	; 16
 b28:	32 e0       	ldi	r19, 0x02	; 2
 b2a:	17 ff       	sbrs	r17, 7
 b2c:	08 c0       	rjmp	.+16     	; 0xb3e <vfprintf+0x280>
 b2e:	f5 01       	movw	r30, r10
 b30:	60 81       	ld	r22, Z
 b32:	71 81       	ldd	r23, Z+1	; 0x01
 b34:	82 81       	ldd	r24, Z+2	; 0x02
 b36:	93 81       	ldd	r25, Z+3	; 0x03
 b38:	44 e0       	ldi	r20, 0x04	; 4
 b3a:	50 e0       	ldi	r21, 0x00	; 0
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <vfprintf+0x290>
 b3e:	f5 01       	movw	r30, r10
 b40:	80 81       	ld	r24, Z
 b42:	91 81       	ldd	r25, Z+1	; 0x01
 b44:	bc 01       	movw	r22, r24
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	42 e0       	ldi	r20, 0x02	; 2
 b4c:	50 e0       	ldi	r21, 0x00	; 0
 b4e:	a4 0e       	add	r10, r20
 b50:	b5 1e       	adc	r11, r21
 b52:	a1 01       	movw	r20, r2
 b54:	c4 d0       	rcall	.+392    	; 0xcde <__ultoa_invert>
 b56:	d8 2e       	mov	r13, r24
 b58:	d2 18       	sub	r13, r2
 b5a:	8f e7       	ldi	r24, 0x7F	; 127
 b5c:	f8 2e       	mov	r15, r24
 b5e:	f1 22       	and	r15, r17
 b60:	f6 fe       	sbrs	r15, 6
 b62:	0b c0       	rjmp	.+22     	; 0xb7a <vfprintf+0x2bc>
 b64:	5e ef       	ldi	r21, 0xFE	; 254
 b66:	f5 22       	and	r15, r21
 b68:	d9 14       	cp	r13, r9
 b6a:	38 f4       	brcc	.+14     	; 0xb7a <vfprintf+0x2bc>
 b6c:	f4 fe       	sbrs	r15, 4
 b6e:	07 c0       	rjmp	.+14     	; 0xb7e <vfprintf+0x2c0>
 b70:	f2 fc       	sbrc	r15, 2
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <vfprintf+0x2c0>
 b74:	8f ee       	ldi	r24, 0xEF	; 239
 b76:	f8 22       	and	r15, r24
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x2c0>
 b7a:	1d 2d       	mov	r17, r13
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <vfprintf+0x2c2>
 b7e:	19 2d       	mov	r17, r9
 b80:	f4 fe       	sbrs	r15, 4
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <vfprintf+0x2e0>
 b84:	fe 01       	movw	r30, r28
 b86:	ed 0d       	add	r30, r13
 b88:	f1 1d       	adc	r31, r1
 b8a:	80 81       	ld	r24, Z
 b8c:	80 33       	cpi	r24, 0x30	; 48
 b8e:	19 f4       	brne	.+6      	; 0xb96 <vfprintf+0x2d8>
 b90:	99 ee       	ldi	r25, 0xE9	; 233
 b92:	f9 22       	and	r15, r25
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <vfprintf+0x2e8>
 b96:	1f 5f       	subi	r17, 0xFF	; 255
 b98:	f2 fe       	sbrs	r15, 2
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <vfprintf+0x2e8>
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <vfprintf+0x2e6>
 b9e:	8f 2d       	mov	r24, r15
 ba0:	86 78       	andi	r24, 0x86	; 134
 ba2:	09 f0       	breq	.+2      	; 0xba6 <vfprintf+0x2e8>
 ba4:	1f 5f       	subi	r17, 0xFF	; 255
 ba6:	0f 2d       	mov	r16, r15
 ba8:	f3 fc       	sbrc	r15, 3
 baa:	13 c0       	rjmp	.+38     	; 0xbd2 <vfprintf+0x314>
 bac:	f0 fe       	sbrs	r15, 0
 bae:	0e c0       	rjmp	.+28     	; 0xbcc <vfprintf+0x30e>
 bb0:	1e 15       	cp	r17, r14
 bb2:	10 f0       	brcs	.+4      	; 0xbb8 <vfprintf+0x2fa>
 bb4:	9d 2c       	mov	r9, r13
 bb6:	0a c0       	rjmp	.+20     	; 0xbcc <vfprintf+0x30e>
 bb8:	9d 2c       	mov	r9, r13
 bba:	9e 0c       	add	r9, r14
 bbc:	91 1a       	sub	r9, r17
 bbe:	1e 2d       	mov	r17, r14
 bc0:	05 c0       	rjmp	.+10     	; 0xbcc <vfprintf+0x30e>
 bc2:	80 e2       	ldi	r24, 0x20	; 32
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	b3 01       	movw	r22, r6
 bc8:	5e d0       	rcall	.+188    	; 0xc86 <fputc>
 bca:	1f 5f       	subi	r17, 0xFF	; 255
 bcc:	1e 15       	cp	r17, r14
 bce:	c8 f3       	brcs	.-14     	; 0xbc2 <vfprintf+0x304>
 bd0:	04 c0       	rjmp	.+8      	; 0xbda <vfprintf+0x31c>
 bd2:	1e 15       	cp	r17, r14
 bd4:	10 f4       	brcc	.+4      	; 0xbda <vfprintf+0x31c>
 bd6:	e1 1a       	sub	r14, r17
 bd8:	01 c0       	rjmp	.+2      	; 0xbdc <vfprintf+0x31e>
 bda:	ee 24       	eor	r14, r14
 bdc:	04 ff       	sbrs	r16, 4
 bde:	0e c0       	rjmp	.+28     	; 0xbfc <vfprintf+0x33e>
 be0:	80 e3       	ldi	r24, 0x30	; 48
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	b3 01       	movw	r22, r6
 be6:	4f d0       	rcall	.+158    	; 0xc86 <fputc>
 be8:	02 ff       	sbrs	r16, 2
 bea:	1b c0       	rjmp	.+54     	; 0xc22 <vfprintf+0x364>
 bec:	01 fd       	sbrc	r16, 1
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <vfprintf+0x338>
 bf0:	88 e7       	ldi	r24, 0x78	; 120
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e c0       	rjmp	.+28     	; 0xc12 <vfprintf+0x354>
 bf6:	88 e5       	ldi	r24, 0x58	; 88
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0b c0       	rjmp	.+22     	; 0xc12 <vfprintf+0x354>
 bfc:	80 2f       	mov	r24, r16
 bfe:	86 78       	andi	r24, 0x86	; 134
 c00:	81 f0       	breq	.+32     	; 0xc22 <vfprintf+0x364>
 c02:	01 ff       	sbrs	r16, 1
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <vfprintf+0x34c>
 c06:	8b e2       	ldi	r24, 0x2B	; 43
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <vfprintf+0x34e>
 c0a:	80 e2       	ldi	r24, 0x20	; 32
 c0c:	f7 fc       	sbrc	r15, 7
 c0e:	8d e2       	ldi	r24, 0x2D	; 45
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	b3 01       	movw	r22, r6
 c14:	38 d0       	rcall	.+112    	; 0xc86 <fputc>
 c16:	05 c0       	rjmp	.+10     	; 0xc22 <vfprintf+0x364>
 c18:	80 e3       	ldi	r24, 0x30	; 48
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	b3 01       	movw	r22, r6
 c1e:	33 d0       	rcall	.+102    	; 0xc86 <fputc>
 c20:	9a 94       	dec	r9
 c22:	d9 14       	cp	r13, r9
 c24:	c8 f3       	brcs	.-14     	; 0xc18 <vfprintf+0x35a>
 c26:	da 94       	dec	r13
 c28:	f1 01       	movw	r30, r2
 c2a:	ed 0d       	add	r30, r13
 c2c:	f1 1d       	adc	r31, r1
 c2e:	80 81       	ld	r24, Z
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	b3 01       	movw	r22, r6
 c34:	28 d0       	rcall	.+80     	; 0xc86 <fputc>
 c36:	dd 20       	and	r13, r13
 c38:	b1 f7       	brne	.-20     	; 0xc26 <vfprintf+0x368>
 c3a:	05 c0       	rjmp	.+10     	; 0xc46 <vfprintf+0x388>
 c3c:	80 e2       	ldi	r24, 0x20	; 32
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	b3 01       	movw	r22, r6
 c42:	21 d0       	rcall	.+66     	; 0xc86 <fputc>
 c44:	ea 94       	dec	r14
 c46:	ee 20       	and	r14, r14
 c48:	c9 f7       	brne	.-14     	; 0xc3c <vfprintf+0x37e>
 c4a:	50 ce       	rjmp	.-864    	; 0x8ec <vfprintf+0x2e>
 c4c:	f3 01       	movw	r30, r6
 c4e:	66 81       	ldd	r22, Z+6	; 0x06
 c50:	77 81       	ldd	r23, Z+7	; 0x07
 c52:	cb 01       	movw	r24, r22
 c54:	2b 96       	adiw	r28, 0x0b	; 11
 c56:	e2 e1       	ldi	r30, 0x12	; 18
 c58:	bc c0       	rjmp	.+376    	; 0xdd2 <__epilogue_restores__>

00000c5a <strnlen_P>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	05 90       	lpm	r0, Z+
 c5e:	61 50       	subi	r22, 0x01	; 1
 c60:	70 40       	sbci	r23, 0x00	; 0
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen_P+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <strnlen>:
 c70:	fc 01       	movw	r30, r24
 c72:	61 50       	subi	r22, 0x01	; 1
 c74:	70 40       	sbci	r23, 0x00	; 0
 c76:	01 90       	ld	r0, Z+
 c78:	01 10       	cpse	r0, r1
 c7a:	d8 f7       	brcc	.-10     	; 0xc72 <strnlen+0x2>
 c7c:	80 95       	com	r24
 c7e:	90 95       	com	r25
 c80:	8e 0f       	add	r24, r30
 c82:	9f 1f       	adc	r25, r31
 c84:	08 95       	ret

00000c86 <fputc>:
 c86:	0f 93       	push	r16
 c88:	1f 93       	push	r17
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	8c 01       	movw	r16, r24
 c90:	eb 01       	movw	r28, r22
 c92:	8b 81       	ldd	r24, Y+3	; 0x03
 c94:	81 ff       	sbrs	r24, 1
 c96:	1b c0       	rjmp	.+54     	; 0xcce <fputc+0x48>
 c98:	82 ff       	sbrs	r24, 2
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <fputc+0x30>
 c9c:	2e 81       	ldd	r18, Y+6	; 0x06
 c9e:	3f 81       	ldd	r19, Y+7	; 0x07
 ca0:	8c 81       	ldd	r24, Y+4	; 0x04
 ca2:	9d 81       	ldd	r25, Y+5	; 0x05
 ca4:	28 17       	cp	r18, r24
 ca6:	39 07       	cpc	r19, r25
 ca8:	64 f4       	brge	.+24     	; 0xcc2 <fputc+0x3c>
 caa:	e8 81       	ld	r30, Y
 cac:	f9 81       	ldd	r31, Y+1	; 0x01
 cae:	01 93       	st	Z+, r16
 cb0:	f9 83       	std	Y+1, r31	; 0x01
 cb2:	e8 83       	st	Y, r30
 cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <fputc+0x3c>
 cb6:	e8 85       	ldd	r30, Y+8	; 0x08
 cb8:	f9 85       	ldd	r31, Y+9	; 0x09
 cba:	80 2f       	mov	r24, r16
 cbc:	09 95       	icall
 cbe:	89 2b       	or	r24, r25
 cc0:	31 f4       	brne	.+12     	; 0xcce <fputc+0x48>
 cc2:	8e 81       	ldd	r24, Y+6	; 0x06
 cc4:	9f 81       	ldd	r25, Y+7	; 0x07
 cc6:	01 96       	adiw	r24, 0x01	; 1
 cc8:	9f 83       	std	Y+7, r25	; 0x07
 cca:	8e 83       	std	Y+6, r24	; 0x06
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <fputc+0x4c>
 cce:	0f ef       	ldi	r16, 0xFF	; 255
 cd0:	1f ef       	ldi	r17, 0xFF	; 255
 cd2:	c8 01       	movw	r24, r16
 cd4:	df 91       	pop	r29
 cd6:	cf 91       	pop	r28
 cd8:	1f 91       	pop	r17
 cda:	0f 91       	pop	r16
 cdc:	08 95       	ret

00000cde <__ultoa_invert>:
 cde:	fa 01       	movw	r30, r20
 ce0:	aa 27       	eor	r26, r26
 ce2:	28 30       	cpi	r18, 0x08	; 8
 ce4:	51 f1       	breq	.+84     	; 0xd3a <__ultoa_invert+0x5c>
 ce6:	20 31       	cpi	r18, 0x10	; 16
 ce8:	81 f1       	breq	.+96     	; 0xd4a <__ultoa_invert+0x6c>
 cea:	e8 94       	clt
 cec:	6f 93       	push	r22
 cee:	6e 7f       	andi	r22, 0xFE	; 254
 cf0:	6e 5f       	subi	r22, 0xFE	; 254
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	af 4f       	sbci	r26, 0xFF	; 255
 cfa:	b1 e0       	ldi	r27, 0x01	; 1
 cfc:	3e d0       	rcall	.+124    	; 0xd7a <__ultoa_invert+0x9c>
 cfe:	b4 e0       	ldi	r27, 0x04	; 4
 d00:	3c d0       	rcall	.+120    	; 0xd7a <__ultoa_invert+0x9c>
 d02:	67 0f       	add	r22, r23
 d04:	78 1f       	adc	r23, r24
 d06:	89 1f       	adc	r24, r25
 d08:	9a 1f       	adc	r25, r26
 d0a:	a1 1d       	adc	r26, r1
 d0c:	68 0f       	add	r22, r24
 d0e:	79 1f       	adc	r23, r25
 d10:	8a 1f       	adc	r24, r26
 d12:	91 1d       	adc	r25, r1
 d14:	a1 1d       	adc	r26, r1
 d16:	6a 0f       	add	r22, r26
 d18:	71 1d       	adc	r23, r1
 d1a:	81 1d       	adc	r24, r1
 d1c:	91 1d       	adc	r25, r1
 d1e:	a1 1d       	adc	r26, r1
 d20:	20 d0       	rcall	.+64     	; 0xd62 <__ultoa_invert+0x84>
 d22:	09 f4       	brne	.+2      	; 0xd26 <__ultoa_invert+0x48>
 d24:	68 94       	set
 d26:	3f 91       	pop	r19
 d28:	2a e0       	ldi	r18, 0x0A	; 10
 d2a:	26 9f       	mul	r18, r22
 d2c:	11 24       	eor	r1, r1
 d2e:	30 19       	sub	r19, r0
 d30:	30 5d       	subi	r19, 0xD0	; 208
 d32:	31 93       	st	Z+, r19
 d34:	de f6       	brtc	.-74     	; 0xcec <__ultoa_invert+0xe>
 d36:	cf 01       	movw	r24, r30
 d38:	08 95       	ret
 d3a:	46 2f       	mov	r20, r22
 d3c:	47 70       	andi	r20, 0x07	; 7
 d3e:	40 5d       	subi	r20, 0xD0	; 208
 d40:	41 93       	st	Z+, r20
 d42:	b3 e0       	ldi	r27, 0x03	; 3
 d44:	0f d0       	rcall	.+30     	; 0xd64 <__ultoa_invert+0x86>
 d46:	c9 f7       	brne	.-14     	; 0xd3a <__ultoa_invert+0x5c>
 d48:	f6 cf       	rjmp	.-20     	; 0xd36 <__ultoa_invert+0x58>
 d4a:	46 2f       	mov	r20, r22
 d4c:	4f 70       	andi	r20, 0x0F	; 15
 d4e:	40 5d       	subi	r20, 0xD0	; 208
 d50:	4a 33       	cpi	r20, 0x3A	; 58
 d52:	18 f0       	brcs	.+6      	; 0xd5a <__ultoa_invert+0x7c>
 d54:	49 5d       	subi	r20, 0xD9	; 217
 d56:	31 fd       	sbrc	r19, 1
 d58:	40 52       	subi	r20, 0x20	; 32
 d5a:	41 93       	st	Z+, r20
 d5c:	02 d0       	rcall	.+4      	; 0xd62 <__ultoa_invert+0x84>
 d5e:	a9 f7       	brne	.-22     	; 0xd4a <__ultoa_invert+0x6c>
 d60:	ea cf       	rjmp	.-44     	; 0xd36 <__ultoa_invert+0x58>
 d62:	b4 e0       	ldi	r27, 0x04	; 4
 d64:	a6 95       	lsr	r26
 d66:	97 95       	ror	r25
 d68:	87 95       	ror	r24
 d6a:	77 95       	ror	r23
 d6c:	67 95       	ror	r22
 d6e:	ba 95       	dec	r27
 d70:	c9 f7       	brne	.-14     	; 0xd64 <__ultoa_invert+0x86>
 d72:	00 97       	sbiw	r24, 0x00	; 0
 d74:	61 05       	cpc	r22, r1
 d76:	71 05       	cpc	r23, r1
 d78:	08 95       	ret
 d7a:	9b 01       	movw	r18, r22
 d7c:	ac 01       	movw	r20, r24
 d7e:	0a 2e       	mov	r0, r26
 d80:	06 94       	lsr	r0
 d82:	57 95       	ror	r21
 d84:	47 95       	ror	r20
 d86:	37 95       	ror	r19
 d88:	27 95       	ror	r18
 d8a:	ba 95       	dec	r27
 d8c:	c9 f7       	brne	.-14     	; 0xd80 <__ultoa_invert+0xa2>
 d8e:	62 0f       	add	r22, r18
 d90:	73 1f       	adc	r23, r19
 d92:	84 1f       	adc	r24, r20
 d94:	95 1f       	adc	r25, r21
 d96:	a0 1d       	adc	r26, r0
 d98:	08 95       	ret

00000d9a <__prologue_saves__>:
 d9a:	2f 92       	push	r2
 d9c:	3f 92       	push	r3
 d9e:	4f 92       	push	r4
 da0:	5f 92       	push	r5
 da2:	6f 92       	push	r6
 da4:	7f 92       	push	r7
 da6:	8f 92       	push	r8
 da8:	9f 92       	push	r9
 daa:	af 92       	push	r10
 dac:	bf 92       	push	r11
 dae:	cf 92       	push	r12
 db0:	df 92       	push	r13
 db2:	ef 92       	push	r14
 db4:	ff 92       	push	r15
 db6:	0f 93       	push	r16
 db8:	1f 93       	push	r17
 dba:	cf 93       	push	r28
 dbc:	df 93       	push	r29
 dbe:	cd b7       	in	r28, 0x3d	; 61
 dc0:	de b7       	in	r29, 0x3e	; 62
 dc2:	ca 1b       	sub	r28, r26
 dc4:	db 0b       	sbc	r29, r27
 dc6:	0f b6       	in	r0, 0x3f	; 63
 dc8:	f8 94       	cli
 dca:	de bf       	out	0x3e, r29	; 62
 dcc:	0f be       	out	0x3f, r0	; 63
 dce:	cd bf       	out	0x3d, r28	; 61
 dd0:	09 94       	ijmp

00000dd2 <__epilogue_restores__>:
 dd2:	2a 88       	ldd	r2, Y+18	; 0x12
 dd4:	39 88       	ldd	r3, Y+17	; 0x11
 dd6:	48 88       	ldd	r4, Y+16	; 0x10
 dd8:	5f 84       	ldd	r5, Y+15	; 0x0f
 dda:	6e 84       	ldd	r6, Y+14	; 0x0e
 ddc:	7d 84       	ldd	r7, Y+13	; 0x0d
 dde:	8c 84       	ldd	r8, Y+12	; 0x0c
 de0:	9b 84       	ldd	r9, Y+11	; 0x0b
 de2:	aa 84       	ldd	r10, Y+10	; 0x0a
 de4:	b9 84       	ldd	r11, Y+9	; 0x09
 de6:	c8 84       	ldd	r12, Y+8	; 0x08
 de8:	df 80       	ldd	r13, Y+7	; 0x07
 dea:	ee 80       	ldd	r14, Y+6	; 0x06
 dec:	fd 80       	ldd	r15, Y+5	; 0x05
 dee:	0c 81       	ldd	r16, Y+4	; 0x04
 df0:	1b 81       	ldd	r17, Y+3	; 0x03
 df2:	aa 81       	ldd	r26, Y+2	; 0x02
 df4:	b9 81       	ldd	r27, Y+1	; 0x01
 df6:	ce 0f       	add	r28, r30
 df8:	d1 1d       	adc	r29, r1
 dfa:	0f b6       	in	r0, 0x3f	; 63
 dfc:	f8 94       	cli
 dfe:	de bf       	out	0x3e, r29	; 62
 e00:	0f be       	out	0x3f, r0	; 63
 e02:	cd bf       	out	0x3d, r28	; 61
 e04:	ed 01       	movw	r28, r26
 e06:	08 95       	ret

00000e08 <_exit>:
 e08:	f8 94       	cli

00000e0a <__stop_program>:
 e0a:	ff cf       	rjmp	.-2      	; 0xe0a <__stop_program>
