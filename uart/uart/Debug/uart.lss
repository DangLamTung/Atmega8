
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000038  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000054  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c4  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010d  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bc  00000000  00000000  00000491  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000149  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000010d  00000000  00000000  000007e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void uart_transmit(char data){
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}

void uart_transmit_string( char* data,int length){
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9uart_initv>:
#define F_CPU 1000000UL
#define baud 9600
#define uart_baud F_CPU/16/baud - 1

void uart_init(){
  UBRR0H =0x00;//(unsigned char)  ( uValue>> 8);  // 0x00
  80:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L =0x0C;//(unsigned char) uValue;  // 0x0C
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	80 93 c4 00 	sts	0x00C4, r24
  // enabling TX & RX
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0A = (1<<UDRE0)|(1<<U2X0);
  90:	82 e2       	ldi	r24, 0x22	; 34
  92:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0C =  (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stop
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24
	}
  9c:	08 95       	ret

0000009e <_Z13uart_transmitc>:

void uart_transmit(char data){
  9e:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	85 ff       	sbrs	r24, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <_Z13uart_transmitc+0x6>
	UDR0 = data;
  aa:	90 93 c6 00 	sts	0x00C6, r25
}
  ae:	08 95       	ret

000000b0 <main>:
void uart_transmit_string( char* data,int length){
	for (int i = 0 ; i < length; i++){
		uart_transmit(data[i]);
	}
}
int main(void)
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
{
	char test [10] = "hello   ";
	uart_init();
  b8:	0e 94 40 00 	call	0x80	; 0x80 <_Z9uart_initv>
  bc:	10 e2       	ldi	r17, 0x20	; 32
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  be:	c8 ea       	ldi	r28, 0xA8	; 168
  c0:	d1 e6       	ldi	r29, 0x61	; 97
    
    while (1) 
    {
		for(char i = 32; i<128;i++){
  c2:	00 e2       	ldi	r16, 0x20	; 32
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <main+0x24>
			uart_transmit(i);
  c6:	81 2f       	mov	r24, r17
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z13uart_transmitc>
  cc:	ce 01       	movw	r24, r28
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x1e>
	char test [10] = "hello   ";
	uart_init();
    
    while (1) 
    {
		for(char i = 32; i<128;i++){
  d2:	1f 5f       	subi	r17, 0xFF	; 255
  d4:	11 23       	and	r17, r17
  d6:	bc f7       	brge	.-18     	; 0xc6 <main+0x16>
  d8:	10 2f       	mov	r17, r16
  da:	fc cf       	rjmp	.-8      	; 0xd4 <main+0x24>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
