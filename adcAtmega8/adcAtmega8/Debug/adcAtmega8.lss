
adcAtmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c6  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008a  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013d  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c7  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__vector_9>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	11 d0       	rcall	.+34     	; 0x56 <main>
  34:	3f c0       	rjmp	.+126    	; 0xb4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z7readADCh>:
#include <util/delay.h>
#include <avr/interrupt.h>
#define F_CPU 10000000L
//#define loop_until_bit_is_set(sfr,bit) do{}while(!bit_is_clear(sfr,bit))
uint16_t readADC(unsigned char adc_pin){
	ADMUX = adc_pin | (1<<REFS1) | (1<<REFS0);
  38:	80 6c       	ori	r24, 0xC0	; 192
  3a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  3c:	e6 e2       	ldi	r30, 0x26	; 38
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	80 81       	ld	r24, Z
  42:	80 64       	ori	r24, 0x40	; 64
  44:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA,ADIF);
  46:	80 81       	ld	r24, Z
  48:	84 ff       	sbrs	r24, 4
  4a:	fd cf       	rjmp	.-6      	; 0x46 <__SREG__+0x7>
	return ADCW;
  4c:	24 b1       	in	r18, 0x04	; 4
  4e:	35 b1       	in	r19, 0x05	; 5
}
  50:	82 2f       	mov	r24, r18
  52:	93 2f       	mov	r25, r19
  54:	08 95       	ret

00000056 <main>:
int main(void)
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
{
    /* Replace with your application code */
	DDRB = 0xFF;
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  5e:	18 ba       	out	0x18, r1	; 24
	
	TCCR0 = (1<<CS02); //set chia 8
  60:	84 e0       	ldi	r24, 0x04	; 4
  62:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  64:	12 be       	out	0x32, r1	; 50
	TIMSK = (1<<TOIE0);
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	89 bf       	out	0x39, r24	; 57
	sei();
  6a:	78 94       	sei



	ADCSRA = (1<<ADEN) | (1<<ADPS0)|(1<<ADPS2);
  6c:	85 e8       	ldi	r24, 0x85	; 133
  6e:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS1) | (1<<REFS0);
  70:	80 ec       	ldi	r24, 0xC0	; 192
  72:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		TCNT0 = readADC(0);
  78:	c2 e5       	ldi	r28, 0x52	; 82
  7a:	d0 e0       	ldi	r29, 0x00	; 0
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	dc df       	rcall	.-72     	; 0x38 <_Z7readADCh>
  80:	88 83       	st	Y, r24
  82:	fc cf       	rjmp	.-8      	; 0x7c <main+0x26>

00000084 <__vector_9>:
		 
    }
}
ISR(TIMER0_OVF_vect){	
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
  92:	ef 93       	push	r30
  94:	ff 93       	push	r31
	PORTB ^= 1;
  96:	e8 e3       	ldi	r30, 0x38	; 56
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	80 83       	st	Z, r24
}
  a2:	ff 91       	pop	r31
  a4:	ef 91       	pop	r30
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
