
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000148  00000000  00000000  000000ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c7  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014c  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e4  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1b c0       	rjmp	.+54     	; 0x6c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <avr/delay.h>

int main(){
	DDRB = 0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
	while(1){
	PORTB = 0xFF;
  3c:	e8 e3       	ldi	r30, 0x38	; 56
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	af ef       	ldi	r26, 0xFF	; 255
  42:	60 e1       	ldi	r22, 0x10	; 16
  44:	77 e2       	ldi	r23, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  46:	49 e1       	ldi	r20, 0x19	; 25
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	a0 83       	st	Z, r26
  4c:	9b 01       	movw	r18, r22
  4e:	ca 01       	movw	r24, r20
  50:	01 97       	sbiw	r24, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <__SREG__+0x11>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  54:	21 50       	subi	r18, 0x01	; 1
  56:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  58:	d1 f7       	brne	.-12     	; 0x4e <__SREG__+0xf>
	_delay_ms(1000);
	PORTB = 0B00000000;
  5a:	10 82       	st	Z, r1
  5c:	9b 01       	movw	r18, r22
  5e:	ca 01       	movw	r24, r20
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <__SREG__+0x21>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  64:	21 50       	subi	r18, 0x01	; 1
  66:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  68:	d1 f7       	brne	.-12     	; 0x5e <__SREG__+0x1f>
  6a:	ef cf       	rjmp	.-34     	; 0x4a <__SREG__+0xb>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
