
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071e  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000235  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <readADC>:
#include <stdint.h>

#define ADC_THRESHOLD	512
#define LED_PIN PB0
uint16_t readADC(uint8_t adc_pin){
	ADMUX &= 0xf0;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	90 83       	st	Z, r25
	ADMUX |= adc_pin;
  8a:	90 81       	ld	r25, Z
  8c:	89 2b       	or	r24, r25
  8e:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));
  9a:	80 81       	ld	r24, Z
  9c:	86 fd       	sbrc	r24, 6
  9e:	fd cf       	rjmp	.-6      	; 0x9a <readADC+0x1a>
	
	return ADC;
  a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  a8:	08 95       	ret

000000aa <dec2bcd>:
uint8_t dec2bcd(uint8_t dec)
{
  aa:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	int shift = 0;

	while (dec)
  ac:	88 23       	and	r24, r24
  ae:	f9 f0       	breq	.+62     	; 0xee <dec2bcd+0x44>
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		result +=  (dec % 10) << shift;
  b6:	7d ec       	ldi	r23, 0xCD	; 205
  b8:	27 9f       	mul	r18, r23
  ba:	91 2d       	mov	r25, r1
  bc:	11 24       	eor	r1, r1
  be:	96 95       	lsr	r25
  c0:	96 95       	lsr	r25
  c2:	96 95       	lsr	r25
  c4:	69 2f       	mov	r22, r25
  c6:	66 0f       	add	r22, r22
  c8:	36 2f       	mov	r19, r22
  ca:	33 0f       	add	r19, r19
  cc:	33 0f       	add	r19, r19
  ce:	36 0f       	add	r19, r22
  d0:	23 1b       	sub	r18, r19
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	04 2e       	mov	r0, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <dec2bcd+0x32>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <dec2bcd+0x2e>
  e0:	82 0f       	add	r24, r18
		dec = dec / 10;
  e2:	29 2f       	mov	r18, r25
		shift += 4;
  e4:	4c 5f       	subi	r20, 0xFC	; 252
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t dec2bcd(uint8_t dec)
{
	uint8_t result = 0;
	int shift = 0;

	while (dec)
  e8:	91 11       	cpse	r25, r1
  ea:	e6 cf       	rjmp	.-52     	; 0xb8 <dec2bcd+0xe>
  ec:	08 95       	ret
	
	return ADC;
}
uint8_t dec2bcd(uint8_t dec)
{
	uint8_t result = 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
		result +=  (dec % 10) << shift;
		dec = dec / 10;
		shift += 4;
	}
	return result;
}
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
    /* Replace with your application code */
	ADCSRA |= (1<<ADEN);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
    DDRB |= 0xFF;
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	84 b9       	out	0x04, r24	; 4
	//PORTB = 0B00000001;
    while (1) 
    {
		PORTB = dec2bcd(readADC(0));
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 40 00 	call	0x80	; 0x80 <readADC>
 108:	0e 94 55 00 	call	0xaa	; 0xaa <dec2bcd>
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	f9 cf       	rjmp	.-14     	; 0x102 <main+0x10>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
